"use strict";
/*--------------------------------------------------------------------------

TypeBox: JSON Schema Type Builder with Static Type Resolution for TypeScript

The MIT License (MIT)

Copyright (c) 2020 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.Type = exports.ReadonlyModifier = exports.OptionalModifier = void 0;
function reflect(value) {
    switch (typeof value) {
        case 'string': return 'string';
        case 'number': return 'number';
        case 'boolean': return 'boolean';
        default: return 'unknown';
    }
}
// #endregion
// #region TModifier
exports.OptionalModifier = Symbol('OptionalModifier');
exports.ReadonlyModifier = Symbol('ReadonlyModifier');
class Type {
    // #region TModifier
    /** Modifies the inner type T into an optional T. */
    static Optional(item) {
        return { ...item, modifier: exports.OptionalModifier };
    }
    /** Modifies the inner type T into an readonly T. */
    static Readonly(item) {
        return { ...item, modifier: exports.ReadonlyModifier };
    }
    // #endregion
    // #region TComposite
    /** Creates a Union type for the given arguments. */
    static Union(items, options = {}) {
        return { ...options, oneOf: items };
    }
    /** Creates an Intersect type for the given arguments. */
    static Intersect(items, options = {}) {
        return { ...options, allOf: items };
    }
    /** Creates a Tuple type for the given arguments. */
    static Tuple(items, options = {}) {
        const type = 'array';
        const additionalItems = false;
        const minItems = items.length;
        const maxItems = items.length;
        return { ...options, type, items, additionalItems, minItems, maxItems };
    }
    // #endregion
    // #region TContract
    /** Creates a `function` type for the given arguments. */
    static Function(args, returns, options = {}) {
        return { ...options, type: 'function', arguments: args, returns };
    }
    /** Creates a `constructor` type for the given arguments. */
    static Constructor(args, returns, options) {
        return { ...options, type: 'constructor', arguments: args, returns };
    }
    /** Creates a `Promise<T>` type. */
    static Promise(item, options = {}) {
        return { ...options, type: 'promise', item };
    }
    /** Creates a `void` type. */
    static Void(options = {}) {
        return { ...options, type: 'void' };
    }
    /** Creates a `undefined` type. */
    static Undefined(options = {}) {
        return { ...options, type: 'undefined' };
    }
    /** Creates a literal from the given value. */
    static Literal(value, options = {}) {
        const type = reflect(value);
        if (type === 'unknown') {
            throw Error('Invalid literal value');
        }
        return { ...options, type, enum: [value] };
    }
    /** Creates a `object` type with the given properties. */
    static Object(properties, options = {}) {
        const property_names = Object.keys(properties);
        const optional = property_names.filter(name => {
            const candidate = properties[name];
            return (candidate.modifier && candidate.modifier === exports.OptionalModifier);
        });
        const required = property_names.filter(name => !optional.includes(name));
        return { ...options, type: 'object', properties, required: required.length ? required : undefined };
    }
    /** Creates a `{[key: string]: T}` type for the given item. */
    static Map(item, options = {}) {
        const additionalProperties = item;
        return { ...options, type: 'object', additionalProperties };
    }
    /** Creates an `Array<T>` type for the given item.` */
    static Array(items, options = {}) {
        return { ...options, type: 'array', items };
    }
    /** Creates an `Enum<T>` from an existing TypeScript enum definition. */
    static Enum(item, options) {
        // We explicitly want to ignore reverse-lookup entries for number enums hence we are
        // getting only keys which are non-numeric and retrieve their value. Credits to
        // https://github.com/UselessPickles/ts-enum-util (Jeff Lau) for inspiration.
        const values = Object.keys(item).filter(key => isNaN(key)).map(key => item[key]);
        return { ...options, enum: values };
    }
    /** Creates a `string` type. */
    static String(options = {}) {
        return { ...options, type: 'string' };
    }
    /** Creates a `number` type. */
    static Number(options = {}) {
        return { ...options, type: 'number' };
    }
    /** Creates a `number` type that checks for `integer`. */
    static Integer(options = {}) {
        return { ...options, type: 'integer' };
    }
    /** Creates a `boolean` type. */
    static Boolean(options = {}) {
        return { ...options, type: 'boolean' };
    }
    /** Creates a `null` type. */
    static Null(options = {}) {
        return { ...options, type: 'null' };
    }
    /** Creates a `any` type. */
    static Any(options = {}) {
        return { ...options };
    }
    // #endregion
    // #region Aliases
    /** Creates a `string` type that validates for the given regular expression. Alias for ```Type.String({ pattern: '...' })``` */
    static Pattern(regex) {
        return this.String({ pattern: regex.source });
    }
    /**
     * Deprecated: Use `Type.String({ format: 'uuid' })`
     *
     * Creates a `string` type that validate a Guid. Alias for ```Type.String({ pattern: '...' })```
     */
    static Guid() {
        const regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;
        return this.String({ pattern: regex.source });
    }
}
exports.Type = Type;
