"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NatsMessagingService = exports.getBearerToken = exports.AuthService = void 0;
const vector_types_1 = require("@connext/vector-types");
const axios_1 = __importDefault(require("axios"));
const pino_1 = __importDefault(require("pino"));
const ts_natsutil_1 = require("ts-natsutil");
const env_1 = require("./env");
var ts_natsutil_2 = require("ts-natsutil");
Object.defineProperty(exports, "AuthService", { enumerable: true, get: function () { return ts_natsutil_2.AuthService; } });
exports.getBearerToken = (authUrl, signer) => () => __awaiter(void 0, void 0, void 0, function* () {
    const nonceResponse = yield axios_1.default.get(`${authUrl}/auth/${signer.publicIdentifier}`);
    const nonce = nonceResponse.data;
    const sig = yield signer.signMessage(nonce);
    const verifyResponse = yield axios_1.default.post(`${authUrl}/auth`, {
        sig,
        userIdentifier: signer.publicIdentifier,
    });
    return verifyResponse.data;
});
class NatsMessagingService {
    constructor(config) {
        this.config = config;
        this.log = config.logger || pino_1.default();
        if (config.messagingUrl) {
            this.authUrl = config.messagingUrl;
            if (env_1.isNode()) {
                this.natsUrl = `nats://${config.messagingUrl.replace(/^.*:\/\//, "").replace(/\//, "").replace(/:[0-9]+/, "")}:4222`;
            }
            else {
                this.natsUrl = `${config.messagingUrl.replace(/:\/\/.*/, "").replace("http", "ws")}://${config.messagingUrl.replace(/^.*:\/\//, "").replace(/\//, "")}/ws-nats`;
            }
            this.log.info(`Derived natsUrl=${this.natsUrl} from messagingUrl=${config.messagingUrl}`);
        }
        else if (!config.authUrl || !config.natsUrl) {
            throw new Error(`Either a messagingUrl or both an authUrl + natsUrl must be provided`);
        }
        if (config.authUrl) {
            this.authUrl = config.authUrl;
        }
        if (config.natsUrl) {
            this.natsUrl = config.natsUrl;
        }
        if (config.bearerToken) {
            this.bearerToken = config.bearerToken;
        }
        else if (config.signer) {
            this.signer = config.signer;
        }
        else {
            throw new Error(`Either a bearerToken or signer must be provided`);
        }
    }
    isConnected() {
        var _a;
        return !!((_a = this.connection) === null || _a === void 0 ? void 0 : _a.isConnected());
    }
    assertConnected() {
        if (!this.isConnected()) {
            throw new Error(`No connection detected, use connect() method`);
        }
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.bearerToken) {
                const nonce = (yield axios_1.default.get(`${this.authUrl}/auth/${this.signer.publicIdentifier}`)).data;
                const sig = yield this.signer.signMessage(nonce);
                const verifyResponse = yield axios_1.default.post(`${this.authUrl}/auth`, {
                    sig,
                    userIdentifier: this.signer.publicIdentifier,
                });
                this.bearerToken = verifyResponse.data;
            }
            const service = ts_natsutil_1.natsServiceFactory({
                bearerToken: this.bearerToken,
                natsServers: [this.natsUrl],
            }, this.log.child({ module: "Messaging-Nats" }));
            const natsConnection = yield service.connect();
            this.connection = service;
            this.log.debug(`Connected!`);
            if (typeof natsConnection.addEventListener === "function") {
                natsConnection.addEventListener("close", () => __awaiter(this, void 0, void 0, function* () {
                    this.bearerToken = undefined;
                    yield this.connect();
                }));
            }
            else {
                natsConnection.on("close", () => __awaiter(this, void 0, void 0, function* () {
                    this.bearerToken = undefined;
                    yield this.connect();
                }));
            }
        });
    }
    disconnect() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            (_a = this.connection) === null || _a === void 0 ? void 0 : _a.disconnect();
        });
    }
    sendProtocolMessage(channelUpdate, previousUpdate, timeout = 30000, numRetries = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            const subject = `${channelUpdate.toIdentifier}.${channelUpdate.fromIdentifier}.protocol`;
            try {
                const msgBody = JSON.stringify({
                    update: channelUpdate,
                    previousUpdate,
                });
                this.log.debug({ method: "sendProtocolMessage", msgBody }, "Sending message");
                const msg = yield this.connection.request(subject, timeout, msgBody);
                this.log.debug({ method: "sendProtocolMessage", msgBody, msg }, "Received response");
                const parsedMsg = typeof msg === `string` ? JSON.parse(msg) : msg;
                const parsedData = typeof msg.data === `string` ? JSON.parse(msg.data) : msg.data;
                parsedMsg.data = parsedData;
                if (parsedMsg.data.error) {
                    return vector_types_1.Result.fail(new vector_types_1.InboundChannelUpdateError(vector_types_1.InboundChannelUpdateError.reasons.MessageFailed, channelUpdate, undefined, parsedMsg.data.error));
                }
                return vector_types_1.Result.ok({ update: parsedMsg.data.update, previousUpdate: parsedMsg.data.update });
            }
            catch (e) {
                return vector_types_1.Result.fail(new vector_types_1.OutboundChannelUpdateError(vector_types_1.OutboundChannelUpdateError.reasons.MessageFailed, channelUpdate, undefined, {
                    message: e.message,
                    subject,
                }));
            }
        });
    }
    onReceiveProtocolMessage(myPublicIdentifier, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            const subscriptionSubject = `${myPublicIdentifier}.*.protocol`;
            yield this.connection.subscribe(subscriptionSubject, (msg, err) => {
                this.log.debug({ method: "onReceiveProtocolMessage", msg }, "Received message");
                const from = msg.subject.split(".")[1];
                if (err) {
                    callback(vector_types_1.Result.fail(new vector_types_1.InboundChannelUpdateError(err, msg.data.update)), from, msg.reply);
                    return;
                }
                const parsedMsg = typeof msg === `string` ? JSON.parse(msg) : msg;
                const parsedData = typeof msg.data === `string` ? JSON.parse(msg.data) : msg.data;
                if (!parsedMsg.reply) {
                    return;
                }
                parsedMsg.data = parsedData;
                if (parsedMsg.data.error) {
                    callback(vector_types_1.Result.fail(parsedMsg.data.error), from, parsedMsg.reply);
                    return;
                }
                callback(vector_types_1.Result.ok({ update: parsedMsg.data.update, previousUpdate: parsedMsg.data.previousUpdate }), from, parsedMsg.reply);
            });
            this.log.debug({ method: "onReceiveProtocolMessage", subject: subscriptionSubject }, `Subscription created`);
        });
    }
    respondToProtocolMessage(inbox, channelUpdate, previousUpdate) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            const subject = inbox;
            this.log.debug({ method: "respondToProtocolMessage", subject, channelUpdate, previousUpdate }, `Sending protocol response`);
            yield this.connection.publish(subject, JSON.stringify({
                update: channelUpdate,
                previousUpdate,
            }));
        });
    }
    respondWithProtocolError(inbox, error) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            const subject = inbox;
            this.log.debug({ method: "respondWithProtocolError", subject, error }, `Sending protocol error response`);
            yield this.connection.publish(subject, JSON.stringify({
                error,
            }));
        });
    }
    sendSetupMessage(setupInfo, to, from, timeout = 30000, numRetries = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            const method = "sendSetupMessage";
            try {
                const subject = `${to}.${from}.setup`;
                const msgBody = JSON.stringify({ setupInfo });
                this.log.debug({ method, msgBody }, "Sending message");
                const msg = yield this.connection.request(subject, timeout, msgBody);
                this.log.debug({ method, msg }, "Received response");
                const parsedMsg = typeof msg === `string` ? JSON.parse(msg) : msg;
                const parsedData = typeof msg.data === `string` ? JSON.parse(msg.data) : msg.data;
                parsedMsg.data = parsedData;
                if (parsedMsg.data.error) {
                    return vector_types_1.Result.fail(new vector_types_1.MessagingError(vector_types_1.MessagingError.reasons.Response, { error: parsedMsg.data.error }));
                }
                return vector_types_1.Result.ok({ channelAddress: parsedMsg.data.message });
            }
            catch (e) {
                return vector_types_1.Result.fail(new vector_types_1.MessagingError(vector_types_1.MessagingError.reasons.Unknown, { error: e.message }));
            }
        });
    }
    onReceiveSetupMessage(publicIdentifier, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            const method = "onReceiveSetupMessage";
            const subscriptionSubject = `${publicIdentifier}.*.setup`;
            yield this.connection.subscribe(subscriptionSubject, (msg, err) => {
                this.log.debug({ method, msg }, "Received message");
                const from = msg.subject.split(".")[1];
                const parsedMsg = typeof msg === `string` ? JSON.parse(msg) : msg;
                if (err) {
                    callback(vector_types_1.Result.fail(new vector_types_1.MessagingError(err)), from, msg.reply);
                    return;
                }
                const parsedData = typeof msg.data === `string` ? JSON.parse(msg.data) : msg.data;
                if (!parsedMsg.reply) {
                    return;
                }
                parsedMsg.data = parsedData;
                if (parsedMsg.data.error) {
                    callback(vector_types_1.Result.fail(parsedMsg.data.error), from, msg.reply);
                    return;
                }
                callback(vector_types_1.Result.ok(parsedMsg.data.setupInfo), from, msg.reply);
            });
            this.log.debug({ method, subject: subscriptionSubject }, `Subscription created`);
        });
    }
    respondToSetupMessage(inbox, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            const subject = inbox;
            this.log.debug({ method: "respondToSetupMessage", subject }, `Sending response`);
            yield this.connection.publish(subject, JSON.stringify(params));
        });
    }
    sendRequestCollateralMessage(requestCollateralParams, to, from, timeout = 30000, numRetries = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            const method = "sendRequestCollateralMessage";
            try {
                const subject = `${to}.${from}.request-collateral`;
                const msgBody = JSON.stringify(requestCollateralParams);
                this.log.debug({ method, msgBody, subject }, "Sending message");
                const msg = yield this.connection.request(subject, timeout, msgBody);
                this.log.debug({ method, msgBody, msg }, "Received response");
                const parsedMsg = typeof msg === `string` ? JSON.parse(msg) : msg;
                const parsedData = typeof msg.data === `string` ? JSON.parse(msg.data) : msg.data;
                parsedMsg.data = parsedData;
                if (parsedMsg.data.error) {
                    return vector_types_1.Result.fail(new Error(parsedMsg.data.error));
                }
                return vector_types_1.Result.ok(undefined);
            }
            catch (e) {
                return vector_types_1.Result.fail(new Error(e.message));
            }
        });
    }
    onReceiveRequestCollateralMessage(publicIdentifier, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            const method = "onReceiveRequestCollateralMessage";
            const subscriptionSubject = `${publicIdentifier}.*.request-collateral`;
            yield this.connection.subscribe(subscriptionSubject, (msg, err) => {
                this.log.debug({ method, msg }, "Received message");
                const from = msg.subject.split(".")[1];
                const parsedMsg = typeof msg === `string` ? JSON.parse(msg) : msg;
                if (err) {
                    callback(vector_types_1.Result.fail(new Error(err)), from, msg.reply);
                    return;
                }
                const parsedData = typeof msg.data === `string` ? JSON.parse(msg.data) : msg.data;
                if (!parsedMsg.reply) {
                    return;
                }
                parsedMsg.data = parsedData;
                if (parsedMsg.data.error) {
                    callback(vector_types_1.Result.fail(parsedMsg.data.error), from, msg.reply);
                    return;
                }
                callback(vector_types_1.Result.ok(parsedMsg.data), from, msg.reply);
            });
            this.log.debug({ method, subject: subscriptionSubject }, `Subscription created`);
        });
    }
    respondToRequestCollateralMessage(inbox, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            const subject = inbox;
            this.log.debug({ method: "respondToLockMessage", subject, params }, `Sending lock response`);
            yield this.connection.publish(subject, JSON.stringify(params));
        });
    }
    sendLockMessage(lockInfo, to, from, timeout = 30000, numRetries = 0) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            const method = "sendLockMessage";
            try {
                const subject = `${to}.${from}.lock`;
                const msgBody = JSON.stringify({ lockInfo });
                this.log.debug({ method, msgBody }, "Sending message");
                const msg = yield this.connection.request(subject, timeout, msgBody);
                this.log.debug({ method, msgBody, msg }, "Received response");
                const parsedMsg = typeof msg === `string` ? JSON.parse(msg) : msg;
                const parsedData = typeof msg.data === `string` ? JSON.parse(msg.data) : msg.data;
                parsedMsg.data = parsedData;
                if (parsedMsg.data.error) {
                    return vector_types_1.Result.fail(new vector_types_1.LockError(vector_types_1.LockError.reasons.Unknown, lockInfo));
                }
                if (lockInfo.type === "acquire" && !((_a = parsedMsg.data.lockInformation) === null || _a === void 0 ? void 0 : _a.lockValue)) {
                    return vector_types_1.Result.fail(new vector_types_1.LockError(vector_types_1.LockError.reasons.Unknown, lockInfo));
                }
                return vector_types_1.Result.ok((_b = parsedMsg.data.lockInformation) === null || _b === void 0 ? void 0 : _b.lockValue);
            }
            catch (e) {
                return vector_types_1.Result.fail(new vector_types_1.LockError(vector_types_1.LockError.reasons.Unknown, Object.assign(Object.assign({}, lockInfo), { error: e.message })));
            }
        });
    }
    onReceiveLockMessage(publicIdentifier, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            const method = "onReceiveLockMessage";
            const subscriptionSubject = `${publicIdentifier}.*.lock`;
            yield this.connection.subscribe(subscriptionSubject, (msg, err) => {
                this.log.debug({ method, msg }, "Received message");
                const from = msg.subject.split(".")[1];
                const parsedMsg = typeof msg === `string` ? JSON.parse(msg) : msg;
                if (err) {
                    callback(vector_types_1.Result.fail(new vector_types_1.LockError(err)), from, msg.reply);
                    return;
                }
                const parsedData = typeof msg.data === `string` ? JSON.parse(msg.data) : msg.data;
                if (!parsedMsg.reply) {
                    return;
                }
                parsedMsg.data = parsedData;
                if (parsedMsg.data.error) {
                    callback(vector_types_1.Result.fail(parsedMsg.data.error), from, msg.reply);
                    return;
                }
                callback(vector_types_1.Result.ok(parsedMsg.data.lockInfo), from, msg.reply);
            });
            this.log.debug({ method, subject: subscriptionSubject }, `Subscription created`);
        });
    }
    respondToLockMessage(inbox, lockInformation) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            const subject = inbox;
            this.log.debug({ method: "respondToLockMessage", subject, lockInformation }, `Sending lock response`);
            yield this.connection.publish(subject, JSON.stringify({ lockInformation }));
        });
    }
    onReceiveCheckIn(myPublicIdentifier, callback) {
        throw new Error("Method not implemented.");
    }
    sendCheckInMessage() {
        throw new Error("Method not implemented.");
    }
    publish(subject, data) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            this.log.debug(`Publishing ${subject}: ${JSON.stringify(data)}`);
            this.connection.publish(subject, JSON.stringify(data));
        });
    }
    request(subject, timeout, data) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            this.log.debug(`Requesting ${subject} with data: ${JSON.stringify(data)}`);
            const response = yield this.connection.request(subject, timeout, JSON.stringify(data));
            this.log.debug(`Request for ${subject} returned: ${JSON.stringify(response)}`);
            return response;
        });
    }
    subscribe(subject, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            yield this.connection.subscribe(subject, (msg, err) => {
                if (err || !msg || !msg.data) {
                    this.log.error({ msg, err }, `Encountered an error while handling callback for message`);
                }
                else {
                    const parsedMsg = typeof msg === `string` ? JSON.parse(msg) : msg;
                    const parsedData = typeof msg.data === `string` ? JSON.parse(msg.data) : msg.data;
                    parsedMsg.data = parsedData;
                    this.log.debug(`Subscription for ${subject}: ${JSON.stringify(parsedMsg)}`);
                    callback(parsedMsg);
                }
            });
        });
    }
    unsubscribe(subject) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assertConnected();
            const unsubscribeFrom = this.getSubjectsToUnsubscribeFrom(subject);
            unsubscribeFrom.forEach(sub => {
                this.connection.unsubscribe(sub);
            });
        });
    }
    flush() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.connection.flush();
        });
    }
    getSubjectsToUnsubscribeFrom(subject) {
        const subscribedTo = this.connection.getSubscribedSubjects();
        const unsubscribeFrom = [];
        const substrsToMatch = subject.split(`>`)[0].split(`*`);
        subscribedTo.forEach(subscribedSubject => {
            let subjectIncludesAllSubstrings = true;
            substrsToMatch.forEach(match => {
                if (!subscribedSubject.includes(match) && match !== ``) {
                    subjectIncludesAllSubstrings = false;
                }
            });
            if (subjectIncludesAllSubstrings) {
                unsubscribeFrom.push(subscribedSubject);
            }
        });
        return unsubscribeFrom;
    }
}
exports.NatsMessagingService = NatsMessagingService;
//# sourceMappingURL=messaging.js.map