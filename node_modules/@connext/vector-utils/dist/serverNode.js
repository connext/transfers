"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RestServerNodeService = void 0;
const vector_types_1 = require("@connext/vector-types");
const ajv_1 = __importDefault(require("ajv"));
const axios_1 = __importDefault(require("axios"));
const evt_1 = require("evt");
const ajv = new ajv_1.default();
class RestServerNodeService {
    constructor(serverNodeUrl, logger, evts) {
        this.serverNodeUrl = serverNodeUrl;
        this.logger = logger;
        this.evts = evts;
        this.publicIdentifier = "";
        this.signerAddress = "";
        this.ctxs = {};
    }
    static connect(serverNodeUrl, logger, evts, index) {
        return __awaiter(this, void 0, void 0, function* () {
            const service = new RestServerNodeService(serverNodeUrl, logger, evts);
            if (index !== undefined || index !== null) {
                const node = yield service.createNode({ index });
                if (node.isError) {
                    logger.error({ error: node.getError().message, method: "connect" }, "Failed to create node");
                    throw node.getError();
                }
                const { publicIdentifier, signerAddress } = node.getValue();
                service.publicIdentifier = publicIdentifier;
                service.signerAddress = signerAddress;
            }
            return service;
        });
    }
    getConfig() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeHttpRequest("config", "get", {}, vector_types_1.ServerNodeParams.GetConfigSchema);
        });
    }
    createNode(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.executeHttpRequest(`node`, "post", params, vector_types_1.ServerNodeParams.CreateNodeSchema);
            if (res.isError) {
                return res;
            }
            if (this.evts) {
                const urls = Object.fromEntries(Object.entries(this.evts).map(([event, config]) => {
                    var _a;
                    return [event, (_a = config.url) !== null && _a !== void 0 ? _a : ""];
                }));
                const { publicIdentifier } = res.getValue();
                this.ctxs[publicIdentifier] = evt_1.Evt.newCtx();
                const params = {
                    events: urls,
                    publicIdentifier: publicIdentifier !== null && publicIdentifier !== void 0 ? publicIdentifier : this.publicIdentifier,
                };
                const subscription = yield this.executeHttpRequest(`event/subscribe`, "post", params, vector_types_1.ServerNodeParams.RegisterListenerSchema);
                if (subscription.isError) {
                    this.logger.error({ error: subscription.getError() }, "Failed to create subscription");
                    return vector_types_1.Result.fail(subscription.getError());
                }
                this.logger.info({ urls, method: "connect" }, "Engine event subscription created");
            }
            return res;
        });
    }
    getStateChannel(params) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeHttpRequest(`${(_a = params.publicIdentifier) !== null && _a !== void 0 ? _a : this.publicIdentifier}/channels/${params.channelAddress}`, "get", params, vector_types_1.ServerNodeParams.GetChannelStateSchema);
        });
    }
    getStateChannels(params) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeHttpRequest(`${(_a = params.publicIdentifier) !== null && _a !== void 0 ? _a : this.publicIdentifier}/channels`, "get", params, vector_types_1.ServerNodeParams.GetChannelStatesSchema);
        });
    }
    getTransfersByRoutingId(params) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeHttpRequest(`${(_a = params.publicIdentifier) !== null && _a !== void 0 ? _a : this.publicIdentifier}/transfers/routing-id/${params.routingId}`, "get", params, vector_types_1.ServerNodeParams.GetTransferStatesByRoutingIdSchema);
        });
    }
    getTransferByRoutingId(params) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeHttpRequest(`${(_a = params.publicIdentifier) !== null && _a !== void 0 ? _a : this.publicIdentifier}/channels/${params.channelAddress}/transfers/routing-id/${params.routingId}`, "get", params, vector_types_1.ServerNodeParams.GetTransferStateByRoutingIdSchema);
        });
    }
    getTransfer(params) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeHttpRequest(`${(_a = params.publicIdentifier) !== null && _a !== void 0 ? _a : this.publicIdentifier}/transfers/${params.transferId}`, "get", params, vector_types_1.ServerNodeParams.GetTransferStateSchema);
        });
    }
    getActiveTransfers(params) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeHttpRequest(`${(_a = params.publicIdentifier) !== null && _a !== void 0 ? _a : this.publicIdentifier}/channels/${params.channelAddress}/active-transfers`, "get", params, vector_types_1.ServerNodeParams.GetActiveTransfersByChannelAddressSchema);
        });
    }
    getStateChannelByParticipants(params) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeHttpRequest(`${(_a = params.publicIdentifier) !== null && _a !== void 0 ? _a : this.publicIdentifier}/channels/counterparty/${params.counterparty}/chain-id/${params.chainId}`, "get", params, vector_types_1.ServerNodeParams.GetChannelStateByParticipantsSchema);
        });
    }
    setup(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeHttpRequest("setup", "post", params, vector_types_1.ServerNodeParams.RequestSetupSchema);
        });
    }
    internalSetup(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeHttpRequest("internal-setup", "post", params, vector_types_1.ServerNodeParams.SetupSchema);
        });
    }
    sendDepositTx(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeHttpRequest("send-deposit-tx", "post", params, vector_types_1.ServerNodeParams.SendDepositTxSchema);
        });
    }
    reconcileDeposit(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeHttpRequest("deposit", "post", {
                channelAddress: params.channelAddress,
                assetId: params.assetId,
                publicIdentifier: params.publicIdentifier,
            }, vector_types_1.ServerNodeParams.DepositSchema);
        });
    }
    requestCollateral(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeHttpRequest("request-collateral", "post", params, vector_types_1.ServerNodeParams.RequestCollateralSchema);
        });
    }
    conditionalTransfer(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeHttpRequest(`transfers/create`, "post", params, vector_types_1.ServerNodeParams.ConditionalTransferSchema);
        });
    }
    resolveTransfer(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeHttpRequest(`transfers/resolve`, "post", params, vector_types_1.ServerNodeParams.ResolveTransferSchema);
        });
    }
    withdraw(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeHttpRequest(`withdraw`, "post", params, vector_types_1.ServerNodeParams.WithdrawSchema);
        });
    }
    once(event, callback, filter = () => true, publicIdentifier) {
        var _a;
        if (!this.evts || !((_a = this.evts[event]) === null || _a === void 0 ? void 0 : _a.evt)) {
            throw new vector_types_1.NodeError(vector_types_1.NodeError.reasons.NoEvts, { event });
        }
        const pubId = publicIdentifier !== null && publicIdentifier !== void 0 ? publicIdentifier : this.publicIdentifier;
        if (!pubId) {
            throw new vector_types_1.NodeError(vector_types_1.NodeError.reasons.NoPublicIdentifier);
        }
        const ctx = this.ctxs[publicIdentifier !== null && publicIdentifier !== void 0 ? publicIdentifier : this.publicIdentifier];
        this.evts[event].evt
            .pipe(ctx)
            .pipe((data) => {
            const filtered = filter(data);
            return filtered && (data.aliceIdentifier === pubId || data.bobIdentifier === pubId);
        })
            .attachOnce(callback);
    }
    on(event, callback, filter = () => true, publicIdentifier) {
        var _a;
        if (!this.evts || !((_a = this.evts[event]) === null || _a === void 0 ? void 0 : _a.evt)) {
            throw new vector_types_1.NodeError(vector_types_1.NodeError.reasons.NoEvts, { event });
        }
        const pubId = publicIdentifier !== null && publicIdentifier !== void 0 ? publicIdentifier : this.publicIdentifier;
        if (!pubId) {
            throw new vector_types_1.NodeError(vector_types_1.NodeError.reasons.NoPublicIdentifier);
        }
        const ctx = this.ctxs[pubId];
        this.evts[event].evt
            .pipe(ctx)
            .pipe((data) => {
            const filtered = filter(data);
            return filtered && (data.aliceIdentifier === pubId || data.bobIdentifier === pubId);
        })
            .attach(callback);
    }
    waitFor(event, timeout, filter = () => true, publicIdentifier) {
        var _a;
        if (!this.evts || !((_a = this.evts[event]) === null || _a === void 0 ? void 0 : _a.evt)) {
            throw new vector_types_1.NodeError(vector_types_1.NodeError.reasons.NoEvts, { event });
        }
        const pubId = publicIdentifier !== null && publicIdentifier !== void 0 ? publicIdentifier : this.publicIdentifier;
        if (!pubId) {
            throw new vector_types_1.NodeError(vector_types_1.NodeError.reasons.NoPublicIdentifier);
        }
        const ctx = this.ctxs[pubId];
        return this.evts[event].evt
            .pipe(ctx)
            .pipe((data) => {
            const filtered = filter(data);
            return filtered && (data.aliceIdentifier === pubId || data.bobIdentifier === pubId);
        })
            .waitFor(timeout);
    }
    off(event, publicIdentifier) {
        var _a;
        if (!this.evts || !((_a = this.evts[event]) === null || _a === void 0 ? void 0 : _a.evt)) {
            throw new vector_types_1.NodeError(vector_types_1.NodeError.reasons.NoEvts, { event });
        }
        if (!publicIdentifier && !this.publicIdentifier) {
            throw new vector_types_1.NodeError(vector_types_1.NodeError.reasons.NoPublicIdentifier);
        }
        const ctx = this.ctxs[publicIdentifier !== null && publicIdentifier !== void 0 ? publicIdentifier : this.publicIdentifier];
        ctx.done();
    }
    executeHttpRequest(urlPath, method, params, paramSchema) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.serverNodeUrl}/${urlPath}`;
            const validate = ajv.compile(paramSchema);
            const filled = Object.assign({ publicIdentifier: this.publicIdentifier }, params);
            if (!validate(filled)) {
                return vector_types_1.Result.fail(new vector_types_1.NodeError(vector_types_1.NodeError.reasons.InvalidParams, {
                    errors: (_a = validate.errors) === null || _a === void 0 ? void 0 : _a.map(err => err.message).join(","),
                }));
            }
            try {
                const res = method === "get" ? yield axios_1.default.get(url) : yield axios_1.default.post(url, filled);
                return vector_types_1.Result.ok(res.data);
            }
            catch (e) {
                const jsonErr = Object.keys(e).includes("toJSON") ? e.toJSON() : e;
                return vector_types_1.Result.fail(new vector_types_1.NodeError((_b = jsonErr.message) !== null && _b !== void 0 ? _b : vector_types_1.NodeError.reasons.InternalServerError, { stack: jsonErr.stack, filled, url }));
            }
        });
    }
}
exports.RestServerNodeService = RestServerNodeService;
//# sourceMappingURL=serverNode.js.map