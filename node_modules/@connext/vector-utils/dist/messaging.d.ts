import { IChannelSigner, ChannelUpdate, IMessagingService, InboundChannelUpdateError, LockError, LockInformation, OutboundChannelUpdateError, Result, EngineParams, MessagingError } from "@connext/vector-types";
import { BaseLogger } from "pino";
export { AuthService } from "ts-natsutil";
export declare type MessagingConfig = {
    messagingUrl?: string;
    authUrl?: string;
    natsUrl?: string;
    bearerToken?: string;
    signer?: IChannelSigner;
    logger?: BaseLogger;
};
export declare const getBearerToken: (authUrl: string, signer: IChannelSigner) => () => Promise<string>;
export declare class NatsMessagingService implements IMessagingService {
    private readonly config;
    private connection;
    private log;
    private authUrl?;
    private bearerToken?;
    private natsUrl?;
    private signer?;
    constructor(config: MessagingConfig);
    private isConnected;
    private assertConnected;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    sendProtocolMessage(channelUpdate: ChannelUpdate<any>, previousUpdate?: ChannelUpdate<any>, timeout?: number, numRetries?: number): Promise<Result<{
        update: ChannelUpdate<any>;
        previousUpdate: ChannelUpdate<any>;
    }, OutboundChannelUpdateError | InboundChannelUpdateError>>;
    onReceiveProtocolMessage(myPublicIdentifier: string, callback: (result: Result<{
        update: ChannelUpdate<any>;
        previousUpdate: ChannelUpdate<any>;
    }, InboundChannelUpdateError>, from: string, inbox: string) => void): Promise<void>;
    respondToProtocolMessage(inbox: string, channelUpdate: ChannelUpdate<any>, previousUpdate?: ChannelUpdate<any>): Promise<void>;
    respondWithProtocolError(inbox: string, error: InboundChannelUpdateError): Promise<void>;
    sendSetupMessage(setupInfo: {
        chainId: number;
        timeout: string;
    }, to: string, from: string, timeout?: number, numRetries?: number): Promise<Result<{
        channelAddress: string;
    }, MessagingError>>;
    onReceiveSetupMessage(publicIdentifier: string, callback: (setupInfo: Result<{
        chainId: number;
        timeout: string;
    }, MessagingError>, from: string, inbox: string) => void): Promise<void>;
    respondToSetupMessage(inbox: string, params?: {
        message?: string;
        error?: string;
    }): Promise<void>;
    sendRequestCollateralMessage(requestCollateralParams: EngineParams.RequestCollateral, to: string, from: string, timeout?: number, numRetries?: number): Promise<Result<undefined, Error>>;
    onReceiveRequestCollateralMessage(publicIdentifier: string, callback: (params: Result<EngineParams.RequestCollateral, Error>, from: string, inbox: string) => void): Promise<void>;
    respondToRequestCollateralMessage(inbox: string, params?: {
        message?: string;
        error?: string;
    }): Promise<void>;
    sendLockMessage(lockInfo: LockInformation, to: string, from: string, timeout?: number, numRetries?: number): Promise<Result<string | undefined, LockError>>;
    onReceiveLockMessage(publicIdentifier: string, callback: (lockInfo: Result<LockInformation, LockError>, from: string, inbox: string) => void): Promise<void>;
    respondToLockMessage(inbox: string, lockInformation: LockInformation & {
        error?: string;
    }): Promise<void>;
    onReceiveCheckIn(myPublicIdentifier: string, callback: (nonce: string, from: string, inbox: string) => void): Promise<void>;
    sendCheckInMessage(): Promise<Result<undefined, OutboundChannelUpdateError>>;
    publish(subject: string, data: any): Promise<void>;
    request(subject: string, timeout: number, data: any): Promise<any>;
    subscribe(subject: string, callback: (msg: any) => void): Promise<void>;
    unsubscribe(subject: string): Promise<void>;
    flush(): Promise<void>;
    private getSubjectsToUnsubscribeFrom;
}
//# sourceMappingURL=messaging.d.ts.map