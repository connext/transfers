"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createlockHash = exports.hashCoreTransferState = exports.hashTransferState = exports.encodeCoreTransferState = exports.encodeTransferResolver = exports.encodeBalance = exports.encodeTransferState = exports.getTransferId = void 0;
const vector_types_1 = require("@connext/vector-types");
const ethers_1 = require("ethers");
const { keccak256, solidityPack, defaultAbiCoder } = ethers_1.utils;
exports.getTransferId = (channelAddress, channelNonce, transferDefinition, transferTimeout) => {
    return keccak256(solidityPack(["address", "address", "uint256", "uint256"], [transferDefinition, channelAddress, transferTimeout, channelNonce]));
};
exports.encodeTransferState = (state, encoding) => {
    return defaultAbiCoder.encode([encoding], [state]);
};
exports.encodeBalance = (balance) => {
    return defaultAbiCoder.encode([vector_types_1.BalanceEncoding], [balance]);
};
exports.encodeTransferResolver = (resolver, encoding) => {
    return defaultAbiCoder.encode([encoding], [resolver]);
};
exports.encodeCoreTransferState = (state) => {
    return defaultAbiCoder.encode([vector_types_1.CoreTransferStateEncoding], [state]);
};
function hashTransferState(state, encoding) {
    return keccak256(solidityPack(["bytes"], [exports.encodeTransferState(state, encoding)]));
}
exports.hashTransferState = hashTransferState;
exports.hashCoreTransferState = (state) => {
    return keccak256(solidityPack(["bytes"], [exports.encodeCoreTransferState(state)]));
};
exports.createlockHash = (preImage) => {
    return ethers_1.utils.soliditySha256(["bytes32"], [preImage]);
};
//# sourceMappingURL=transfers.js.map