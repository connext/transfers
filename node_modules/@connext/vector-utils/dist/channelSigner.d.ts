import { Signer, providers } from "ethers";
import { UrlString, IChannelSigner, PublicIdentifier, PublicKey, PrivateKey, HexString, SignatureString, Address } from "@connext/vector-types";
export declare const getRandomChannelSigner: (provider?: UrlString | providers.Provider) => ChannelSigner;
export declare class ChannelSigner extends Signer implements IChannelSigner {
    private readonly privateKey;
    address: Address;
    publicIdentifier: PublicIdentifier;
    publicKey: PublicKey;
    provider?: providers.Provider;
    private readonly _ethersType;
    constructor(privateKey: PrivateKey, provider?: UrlString | providers.Provider);
    getAddress(): Promise<Address>;
    encrypt: (message: string, publicKey: string) => Promise<string>;
    connectProvider(provider?: UrlString | providers.Provider): Promise<void>;
    connect(provider: providers.Provider): ChannelSigner;
    decrypt(message: string): Promise<HexString>;
    signMessage(message: string): Promise<SignatureString>;
    signTransaction(transaction: providers.TransactionRequest): Promise<string>;
    sendTransaction(transaction: providers.TransactionRequest): Promise<providers.TransactionResponse>;
}
//# sourceMappingURL=channelSigner.d.ts.map