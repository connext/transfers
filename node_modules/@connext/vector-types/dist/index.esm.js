import { providers } from 'ethers';
export { Contract } from 'ethers';
import { Type } from '@sinclair/typebox';

const JsonRpcProvider = providers.JsonRpcProvider;

class Result {
    constructor(error, value) {
        if (error) {
            this.isError = true;
            this.error = error;
        }
        else {
            this.isError = false;
            this.value = value;
        }
    }
    getValue() {
        if (this.isError) {
            throw new Error(`Can't getValue() of error result: ${this.error}`);
        }
        return this.value;
    }
    getError() {
        if (this.isError) {
            return this.error;
        }
        return undefined;
    }
    static fail(error) {
        return new Result(error);
    }
    static ok(result) {
        return new Result(undefined, result);
    }
}
class VectorError extends Error {
    constructor(message, context) {
        super(message);
        this.message = message;
        this.context = context;
    }
}
VectorError.errors = {
    OutboundChannelUpdateError: "OutboundChannelUpdateError",
    InboundChannelUpdateError: "InboundChannelUpdateError",
    ChainError: "ChainError",
    ValidationError: "ValidationError",
    RouterError: "RouterError",
    NodeError: "NodeError",
    LockError: "LockError",
    MessagingError: "MessagingError",
};
class ValidationError extends VectorError {
    constructor(message, params, state, context) {
        super(message, context);
        this.message = message;
        this.params = params;
        this.state = state;
        this.context = context;
        this.type = VectorError.errors.ValidationError;
    }
}
ValidationError.reasons = {
    BadUpdateType: "Unrecognized update type",
    ChannelAlreadySetup: "Channel is already setup",
    ChannelNotFound: "No channel found in storage",
    SetupTimeoutInvalid: "Provided state timeout is invalid",
    TransferNotActive: "Transfer not found in activeTransfers",
    TransferNotFound: "No transfer found in storage",
    ExternalValidationFailed: "Failed external validation",
};
class OutboundChannelUpdateError extends VectorError {
    constructor(message, params, state, context) {
        super(message, context);
        this.message = message;
        this.params = params;
        this.state = state;
        this.context = context;
        this.type = VectorError.errors.OutboundChannelUpdateError;
    }
}
OutboundChannelUpdateError.reasons = {
    ApplyUpdateFailed: "Failed to apply update",
    BadSignatures: "Could not recover signers",
    BadUpdateType: "Unrecognized update type",
    ChannelNotFound: "No channel found in storage",
    CounterpartyFailure: "Counterparty failed to apply update",
    Create2Failed: "Failed to get create2 address",
    InvalidParams: "Invalid params",
    MessageFailed: "Failed to send message",
    OutboundValidationFailed: "Requested update is invalid",
    RestoreNeeded: "Channel too far out of sync, must be restored",
    RegenerateUpdateFailed: "Failed to regenerate update after sync",
    SaveChannelFailed: "Failed to save channel",
    StaleChannelNoUpdate: "Channel nonce is behind, no latest update from counterparty",
    StaleChannel: "Channel state is behind, cannot apply update",
    SyncSingleSigned: "Counterparty gave single signed update to sync, refusing",
    SyncFailure: "Failed to sync channel from counterparty update",
    SyncValidationFailed: "Failed to validate update for sync",
    TransferNotFound: "No transfer found in storage",
    TransferNotActive: "Transfer not found in activeTransfers",
    TransferNotRegistered: "Transfer not found in activeTransfers",
};
class LockError extends VectorError {
    constructor() {
        super(...arguments);
        this.type = VectorError.errors.LockError;
    }
}
LockError.reasons = {
    Unknown: "Unknown Lock Error //TODO",
};
class InboundChannelUpdateError extends VectorError {
    constructor(message, update, state, context) {
        super(message, context);
        this.message = message;
        this.update = update;
        this.state = state;
        this.context = context;
        this.type = VectorError.errors.InboundChannelUpdateError;
    }
}
InboundChannelUpdateError.reasons = {
    ApplyUpdateFailed: "Failed to apply update",
    BadSignatures: "Could not recover signers",
    BadUpdateType: "Unrecognized update type",
    ChannelNotFound: "No channel found in storage",
    DifferentIdentifiers: "Update changes channel publicIdentifiers",
    DifferentChannelAddress: "Update changes channelAddress",
    InboundValidationFailed: "Failed to validate incoming update",
    InvalidAssetId: "Update `assetId` is invalid address",
    InvalidChannelAddress: "Update `channelAddress` is invalid",
    MergeUpdateFailed: "Failed to merge update",
    MessageFailed: "Failed to send message",
    RestoreNeeded: "Channel too far out of sync, must be restored",
    StaleChannel: "Channel state is behind, cannot apply update",
    StaleUpdate: "Update does not progress channel nonce",
    StaleChannelNoUpdate: "Channel nonce is behind, no latest update from counterparty",
    SaveChannelFailed: "Failed to save channel",
    SyncSingleSigned: "Counterparty gave single signed update to sync, refusing",
    SyncFailure: "Failed to sync channel from counterparty update",
    TransferNotFound: "No transfer found in storage",
};
class NodeError extends VectorError {
    constructor(message, context) {
        super(message, context);
        this.message = message;
        this.context = context;
        this.type = VectorError.errors.NodeError;
    }
}
NodeError.reasons = {
    InternalServerError: "Failed to send request",
    InvalidParams: "Request has invalid parameters",
    MultinodeProhibitted: "Not allowed to have multiple nodes",
    NoEvts: "No evts for event",
    NoPublicIdentifier: "Public identifier not supplied, and no default identifier",
    ProviderNotFound: "Provider not available for chain",
    Timeout: "Timeout",
    TransactionNotMined: "Failed to wait for transaction to be mined",
};
class MessagingError extends VectorError {
    constructor(message, context) {
        super(message, context);
        this.message = message;
        this.context = context;
        this.type = VectorError.errors.MessagingError;
    }
}
MessagingError.reasons = {
    Response: "Error received in response",
    Unknown: "Unknown messaging error",
};

const ERC20Abi = [
    "function balanceOf(address owner) view returns (uint256)",
    "function decimals() view returns (uint8)",
    "function symbol() view returns (string)",
    "function totalSupply() external view returns (uint256)",
    "function allowance(address owner, address spender) external view returns (uint256)",
    "function approve(address spender, uint256 amount) external returns (bool)",
    "function transfer(address to, uint amount) returns (boolean)",
    "function transferFrom(address sender, address recipient, uint256 amount) external returns (bool)",
    "event Transfer(address indexed from, address indexed to, uint amount)",
    "event Approval(address indexed owner, address indexed spender, uint256 value)",
];
class ChainError extends VectorError {
    constructor(message, context = {}) {
        super(message);
        this.message = message;
        this.context = context;
        this.type = VectorError.errors.ChainError;
        this.canRetry = Object.values(ChainError.retryableTxErrors).includes(this.message);
    }
}
ChainError.reasons = {
    ProviderNotFound: "Provider not found for chainId",
    SignerNotFound: "Signer not found for chainId",
    SenderNotInChannel: "Sender is not a channel participant",
    NotEnoughFunds: "Not enough funds in wallet",
    FailedToSendTx: "Failed to send transaction to chain",
    TransferNotRegistered: "Transfer not in registry",
    MissingSigs: "Channel state is not double signed",
    ResolverNeeded: "Transfer resolver must be provided in dispute",
    NotInitialState: "Transfer must be disputed with initial state",
};
ChainError.retryableTxErrors = {
    BadNonce: "the tx doesn't have the correct nonce",
    InvalidNonce: "Invalid nonce",
    MissingHash: "no transaction hash found in tx response",
    UnderpricedReplancement: "replacement transaction underpriced",
};

const enumify = (x) => x;
const tidy = (str) => `${str.replace(/\n/g, "").replace(/ +/g, " ")}`;

const BalanceEncoding = tidy(`tuple(
    uint256[2] amount,
    address[2] to
  )`);

const UpdateType = {
    create: "create",
    deposit: "deposit",
    resolve: "resolve",
    setup: "setup",
};
const CoreChannelStateEncoding = tidy(`tuple(
  address channelAddress,
  address alice,
  address bob,
  address[] assetIds,
  ${BalanceEncoding}[] balances,
  uint256[] processedDepositsA,
  uint256[] processedDepositsB,
  uint256 timeout,
  uint256 nonce,
  bytes32 merkleRoot,
  uint256 defundNonce
)`);
const CoreTransferStateEncoding = tidy(`tuple(
  address channelAddress,
  bytes32 transferId,
  address transferDefinition,
  address initiator,
  address responder,
  address assetId,
  ${BalanceEncoding} balance,
  uint256 transferTimeout,
  bytes32 initialStateHash
)`);

const DEFAULT_TRANSFER_TIMEOUT = 8640;
const MINIMUM_TRANSFER_TIMEOUT = DEFAULT_TRANSFER_TIMEOUT / 2;
const TRANSFER_DECREMENT = 432;

const SETUP_EVENT = "SETUP";
const CONDITIONAL_TRANSFER_CREATED_EVENT = "CONDITIONAL_TRANSFER_CREATED";
const CONDITIONAL_TRANSFER_RESOLVED_EVENT = "CONDITIONAL_TRANSFER_RESOLVED";
const DEPOSIT_RECONCILED_EVENT = "DEPOSIT_RECONCILED";
const REQUEST_COLLATERAL_EVENT = "REQUEST_COLLATERAL";
const WITHDRAWAL_CREATED_EVENT = "WITHDRAWAL_CREATED";
const WITHDRAWAL_RESOLVED_EVENT = "WITHDRAWAL_RESOLVED";
const WITHDRAWAL_RECONCILED_EVENT = "WITHDRAWAL_RECONCILED";
const EngineEvents = {
    [SETUP_EVENT]: SETUP_EVENT,
    [CONDITIONAL_TRANSFER_CREATED_EVENT]: CONDITIONAL_TRANSFER_CREATED_EVENT,
    [CONDITIONAL_TRANSFER_RESOLVED_EVENT]: CONDITIONAL_TRANSFER_RESOLVED_EVENT,
    [DEPOSIT_RECONCILED_EVENT]: DEPOSIT_RECONCILED_EVENT,
    [REQUEST_COLLATERAL_EVENT]: REQUEST_COLLATERAL_EVENT,
    [WITHDRAWAL_CREATED_EVENT]: WITHDRAWAL_CREATED_EVENT,
    [WITHDRAWAL_RESOLVED_EVENT]: WITHDRAWAL_RESOLVED_EVENT,
    [WITHDRAWAL_RECONCILED_EVENT]: WITHDRAWAL_RECONCILED_EVENT,
};

const ProtocolEventName = {
    CHANNEL_UPDATE_EVENT: "CHANNEL_UPDATE_EVENT",
};

const TAddress = Type.Pattern(/^0x[a-fA-F0-9]{40}$/);
const TIntegerString = Type.Pattern(/^([0-9])*$/);
const TDecimalString = Type.Pattern(/^[0-9]*\.?[0-9]*$/);
const TPublicIdentifier = Type.Pattern(/^indra([a-zA-Z0-9]{50})$/);
const TBytes32 = Type.Pattern(/^0x([a-fA-F0-9]{64})$/);
const TBytes = Type.Pattern(/^0x([a-fA-F0-9])$/);
const TSignature = Type.Pattern(/^0x([a-fA-F0-9]{130})$/);
const TUrl = Type.String({ format: "uri" });
const TChainId = Type.Number({ minimum: 1 });
const TBalance = Type.Object({
    to: Type.Array(TAddress),
    amount: Type.Array(TIntegerString),
});
const TBasicMeta = Type.Optional(Type.Any());
const TContractAddresses = Type.Object({
    channelFactoryAddress: TAddress,
    channelMastercopyAddress: TAddress,
    transferRegistryAddress: TAddress,
});
const TNetworkContext = Type.Intersect([
    TContractAddresses,
    Type.Object({
        chainId: TChainId,
        providerUrl: TUrl,
    }),
]);
const TransferStateSchema = Type.Any();
const TransferResolverSchema = Type.Any();
const TransferEncodingSchema = Type.Array(Type.String(), { maxItems: 2, minItems: 2, uniqueItems: true });
const TransferNameSchema = Type.String();
const TFullTransferState = Type.Object({
    balance: TBalance,
    assetId: TAddress,
    channelAddress: TAddress,
    transferId: TBytes32,
    transferDefinition: TAddress,
    transferTimeout: TIntegerString,
    initialStateHash: TBytes32,
    initiator: TAddress,
    responder: TAddress,
    channelFactoryAddress: TAddress,
    chainId: TChainId,
    transferEncodings: TransferEncodingSchema,
    transferState: TransferStateSchema,
    transferResolver: Type.Optional(Type.Any()),
    meta: TBasicMeta,
});
const TSetupUpdateDetails = Type.Object({
    timeout: TIntegerString,
    networkContext: TNetworkContext,
});
const TDepositUpdateDetails = Type.Object({
    totalDepositsAlice: TIntegerString,
    totalDepositsBob: TIntegerString,
});
const TCreateUpdateDetails = Type.Object({
    transferId: TBytes32,
    balance: TBalance,
    transferDefinition: TAddress,
    transferTimeout: TIntegerString,
    transferInitialState: TransferStateSchema,
    merkleProofData: Type.Array(TBytes),
    merkleRoot: TBytes32,
    meta: TBasicMeta,
});
const TResolveUpdateDetails = Type.Object({
    transferId: TBytes32,
    transferDefinition: TAddress,
    transferResolver: TransferResolverSchema,
    merkleRoot: TBytes32,
    meta: TBasicMeta,
});
const TChannelUpdateDetails = Type.Union([
    TSetupUpdateDetails,
    TDepositUpdateDetails,
    TCreateUpdateDetails,
    TResolveUpdateDetails,
]);
const TChannelUpdateType = Type.Union(Object.values(UpdateType).map(update => Type.Literal(update)));
const TChannelUpdate = Type.Object({
    channelAddress: TAddress,
    fromIdentifier: TPublicIdentifier,
    toIdentifier: TPublicIdentifier,
    type: TChannelUpdateType,
    nonce: Type.Number(),
    balance: TBalance,
    assetId: TAddress,
    details: TCreateUpdateDetails,
    aliceSignature: Type.Optional(TSignature),
    bobSignature: Type.Optional(TSignature),
});
const TFullChannelState = Type.Object({
    assetIds: Type.Array(TAddress, { minItems: 1 }),
    balances: Type.Array(TBalance, { minItems: 1 }),
    channelAddress: TAddress,
    alice: TAddress,
    bob: TAddress,
    merkleRoot: TBytes,
    nonce: Type.Number(),
    processedDepositsA: Type.Array(TIntegerString),
    processedDepositsB: Type.Array(TIntegerString),
    timeout: TIntegerString,
    aliceIdentifier: TPublicIdentifier,
    bobIdentifier: TPublicIdentifier,
    latestUpdate: TChannelUpdate,
    networkContext: TNetworkContext,
});

const VectorNodeConfigSchema = Type.Object({
    adminToken: Type.String(),
    authUrl: Type.Optional(Type.String({ format: "uri" })),
    chainAddresses: Type.Map(TContractAddresses),
    chainProviders: Type.Map(TUrl),
    dbUrl: Type.Optional(TUrl),
    logLevel: Type.Optional(Type.Union([
        Type.Literal("fatal"),
        Type.Literal("error"),
        Type.Literal("warn"),
        Type.Literal("info"),
        Type.Literal("debug"),
        Type.Literal("trace"),
        Type.Literal("silent"),
    ])),
    messagingUrl: Type.Optional(TUrl),
    mnemonic: Type.Optional(Type.String()),
    natsUrl: Type.Optional(TUrl),
});

const ChannelRpcMethods = {
    chan_getChannelState: "chan_getChannelState",
    chan_getChannelStateByParticipants: "chan_getChannelStateByParticipants",
    chan_getChannelStates: "chan_getChannelStates",
    chan_getTransferStateByRoutingId: "chan_getTransferStateByRoutingId",
    chan_getTransferStatesByRoutingId: "chan_getTransferStatesByRoutingId",
    chan_getActiveTransfers: "chan_getActiveTransfers",
    chan_getTransferState: "chan_getTransferState",
    chan_setup: "chan_setup",
    chan_requestSetup: "chan_requestSetup",
    chan_deposit: "chan_deposit",
    chan_requestCollateral: "chan_requestCollateral",
    chan_createTransfer: "chan_createTransfer",
    chan_resolveTransfer: "chan_resolveTransfer",
    chan_withdraw: "chan_withdraw",
};

const GetTransferStateByRoutingIdParamsSchema = Type.Object({
    channelAddress: TAddress,
    routingId: TBytes32,
});
const GetTransferStatesByRoutingIdParamsSchema = Type.Object({
    routingId: TBytes32,
});
const GetChannelStateParamsSchema = Type.Object({ channelAddress: TAddress });
const GetChannelStatesParamsSchema = Type.Object({});
const GetChannelStateByParticipantsParamsSchema = Type.Object({
    alice: TPublicIdentifier,
    bob: TPublicIdentifier,
    chainId: TChainId,
});
const GetActiveTransfersParamsSchema = Type.Object({
    channelAddress: TAddress,
});
const GetTransferStateParamsSchema = Type.Object({
    transferId: TBytes32,
});
const SetupEngineParamsSchema = Type.Object({
    counterpartyIdentifier: TPublicIdentifier,
    chainId: TChainId,
    timeout: TIntegerString,
    meta: TBasicMeta,
});
const DepositEngineParamsSchema = Type.Object({
    channelAddress: TAddress,
    assetId: TAddress,
    meta: TBasicMeta,
});
const RequestCollateralEngineParamsSchema = Type.Object({
    channelAddress: TAddress,
    assetId: TAddress,
    amount: Type.Optional(TIntegerString),
});
const CreateConditionalTransferParamsSchema = Type.Object({
    channelAddress: TAddress,
    amount: TIntegerString,
    assetId: TAddress,
    recipient: Type.Optional(TPublicIdentifier),
    recipientChainId: Type.Optional(TChainId),
    recipientAssetId: Type.Optional(TAddress),
    timeout: Type.Optional(TIntegerString),
    meta: TBasicMeta,
    type: Type.String(),
    details: Type.Any(),
});
const ResolveTransferParamsSchema = Type.Object({
    channelAddress: TAddress,
    transferId: TBytes32,
    meta: TBasicMeta,
    transferResolver: TransferResolverSchema,
});
const WithdrawParamsSchema = Type.Object({
    channelAddress: TAddress,
    amount: TIntegerString,
    assetId: TAddress,
    recipient: TAddress,
    fee: Type.Optional(TIntegerString),
    meta: TBasicMeta,
});
const RpcRequestEngineParamsSchema = Type.Object({
    id: Type.Number({ minimum: 1 }),
    jsonrpc: Type.Literal("2.0"),
    method: Type.Union(Object.values(ChannelRpcMethods).map(methodName => Type.Literal(methodName))),
    params: Type.Optional(Type.Any()),
});
var EngineParams;
(function (EngineParams) {
    EngineParams.RpcRequestSchema = RpcRequestEngineParamsSchema;
    EngineParams.GetTransferStateByRoutingIdSchema = GetTransferStateByRoutingIdParamsSchema;
    EngineParams.GetTransferStatesByRoutingIdSchema = GetTransferStatesByRoutingIdParamsSchema;
    EngineParams.GetChannelStatesSchema = GetChannelStatesParamsSchema;
    EngineParams.GetChannelStateSchema = GetChannelStateParamsSchema;
    EngineParams.GetChannelStateByParticipantsSchema = GetChannelStateByParticipantsParamsSchema;
    EngineParams.GetActiveTransfersSchema = GetActiveTransfersParamsSchema;
    EngineParams.GetTransferStateSchema = GetTransferStateParamsSchema;
    EngineParams.SetupSchema = SetupEngineParamsSchema;
    EngineParams.DepositSchema = DepositEngineParamsSchema;
    EngineParams.RequestCollateralSchema = RequestCollateralEngineParamsSchema;
    EngineParams.ConditionalTransferSchema = CreateConditionalTransferParamsSchema;
    EngineParams.ResolveTransferSchema = ResolveTransferParamsSchema;
    EngineParams.WithdrawSchema = WithdrawParamsSchema;
})(EngineParams || (EngineParams = {}));

const SetupProtocolParamsSchema = Type.Intersect([
    TSetupUpdateDetails,
    Type.Object({ counterpartyIdentifier: TPublicIdentifier, meta: TBasicMeta }),
]);
const DepositProtocolParamsSchema = Type.Object({
    channelAddress: TAddress,
    assetId: TAddress,
    meta: TBasicMeta,
});
const CreateProtocolParamsSchema = Type.Object({
    channelAddress: TAddress,
    balance: TBalance,
    assetId: TAddress,
    transferDefinition: TAddress,
    transferInitialState: TransferStateSchema,
    timeout: TIntegerString,
    meta: TBasicMeta,
});
const ResolveProtocolParamsSchema = Type.Object({
    channelAddress: TAddress,
    transferId: TBytes32,
    transferResolver: TransferResolverSchema,
    meta: TBasicMeta,
});
var ProtocolParams;
(function (ProtocolParams) {
    ProtocolParams.SetupSchema = SetupProtocolParamsSchema;
    ProtocolParams.DepositSchema = DepositProtocolParamsSchema;
    ProtocolParams.CreateSchema = CreateProtocolParamsSchema;
    ProtocolParams.ResolveSchema = ResolveProtocolParamsSchema;
})(ProtocolParams || (ProtocolParams = {}));

const TPathSchema = Type.Object({
    recipient: TPublicIdentifier,
    recipientChainId: TChainId,
    recipientAssetId: TAddress,
});
const TRoutingMeta = Type.Object({
    routingId: TBytes32,
    requireOnline: Type.Boolean(),
    path: Type.Array(TPathSchema),
});
var RouterSchemas;
(function (RouterSchemas) {
    RouterSchemas.RouterMeta = TRoutingMeta;
})(RouterSchemas || (RouterSchemas = {}));

const BasicChannelServerResponseSchema = {
    200: Type.Object({
        channelAddress: TAddress,
    }),
};
const BasicTransferServerResponseSchema = {
    200: Type.Object({
        channelAddress: TAddress,
        transferId: TBytes32,
        routingId: Type.Optional(TBytes32),
    }),
};
const GetTransferStateByRoutingIdParamsSchema$1 = Type.Intersect([
    EngineParams.GetTransferStateByRoutingIdSchema,
    Type.Object({
        publicIdentifier: TPublicIdentifier,
    }),
]);
const GetTransferStateByRoutingIdResponseSchema = {
    200: Type.Union([Type.Undefined, TFullTransferState]),
};
const GetTransferStatesByRoutingIdParamsSchema$1 = Type.Intersect([
    EngineParams.GetTransferStatesByRoutingIdSchema,
    Type.Object({
        publicIdentifier: TPublicIdentifier,
    }),
]);
const GetTransferStatesByRoutingIdResponseSchema = {
    200: Type.Array(TFullTransferState),
};
const GetActiveTransfersByChannelAddressParamsSchema = Type.Intersect([
    EngineParams.GetActiveTransfersSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const GetActiveTransfersByChannelAddressResponseSchema = {
    200: Type.Array(TFullTransferState),
};
const GetTransferStateParamsSchema$1 = Type.Intersect([
    EngineParams.GetTransferStateSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const GetTransferStateResponseSchema = {
    200: Type.Union([Type.Undefined, TFullTransferState]),
};
const GetChannelStateParamsSchema$1 = Type.Intersect([
    EngineParams.GetChannelStateSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const GetChannelStateResponseSchema = {
    200: Type.Union([Type.Undefined, TFullChannelState]),
};
const GetChannelStatesParamsSchema$1 = Type.Intersect([
    EngineParams.GetChannelStatesSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const GetChannelStatesResponseSchema = {
    200: Type.Array(TAddress),
};
const GetChannelStateByParticipantsParamsSchema$1 = Type.Object({
    publicIdentifier: TPublicIdentifier,
    counterparty: TPublicIdentifier,
    chainId: TChainId,
});
const GetChannelStateByParticipantsResponseSchema = GetChannelStateResponseSchema;
const GetConfigResponseSchema = {
    200: Type.Array(Type.Object({
        publicIdentifier: TPublicIdentifier,
        signerAddress: TAddress,
        index: Type.Integer(),
    })),
};
const GetListenerParamsSchema = Type.Object({
    eventName: Type.Union(Object.values(EngineEvents).map(e => Type.Literal(e))),
    publicIdentifier: TPublicIdentifier,
});
const GetListenerResponseSchema = {
    200: Type.Object({ url: TUrl }),
};
const GetListenersParamsSchema = Type.Object({ publicIdentifier: TPublicIdentifier });
const GetListenersResponseSchema = {
    200: Type.Map(TUrl),
};
const PostRegisterListenerBodySchema = Type.Object({
    publicIdentifier: TPublicIdentifier,
    events: Type.Map(Type.String()),
});
const PostRegisterListenerResponseSchema = {
    200: Type.Object({
        message: Type.String(),
    }),
};
const PostSetupBodySchema = Type.Intersect([
    EngineParams.SetupSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const PostSetupResponseSchema = BasicChannelServerResponseSchema;
const PostRequestSetupBodySchema = PostSetupBodySchema;
const PostRequestSetupResponseSchema = BasicChannelServerResponseSchema;
const PostDepositBodySchema = Type.Intersect([
    EngineParams.DepositSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const PostDepositResponseSchema = BasicChannelServerResponseSchema;
const PostRequestCollateralBodySchema = Type.Intersect([
    EngineParams.RequestCollateralSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const PostRequestCollateralResponseSchema = BasicChannelServerResponseSchema;
const PostSendDepositTxBodySchema = Type.Object({
    channelAddress: TAddress,
    amount: TIntegerString,
    assetId: TAddress,
    chainId: TChainId,
    publicIdentifier: TPublicIdentifier,
});
const PostSendDepositTxResponseSchema = {
    200: Type.Object({
        txHash: TBytes32,
    }),
};
const PostConditionalTransferBodySchema = Type.Intersect([
    EngineParams.ConditionalTransferSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const PostConditionalTransferResponseSchema = BasicTransferServerResponseSchema;
const PostResolveTransferBodySchema = Type.Intersect([
    EngineParams.ResolveTransferSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const PostResolveTransferResponseSchema = BasicTransferServerResponseSchema;
const PostWithdrawTransferBodySchema = Type.Intersect([
    EngineParams.WithdrawSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const PostWithdrawTransferResponseSchema = {
    200: Type.Object({
        channelAddress: TAddress,
        transferId: TBytes32,
        transactionHash: Type.Optional(TBytes32),
    }),
};
const PostCreateNodeBodySchema = Type.Object({
    index: Type.Integer({ minimum: 0, maximum: 2147483647 }),
    mnemonic: Type.Optional(Type.String()),
});
const PostCreateNodeResponseSchema = {
    200: Type.Object({
        publicIdentifier: TPublicIdentifier,
        signerAddress: TAddress,
        index: Type.Integer(),
    }),
};
const PostAdminBodySchema = Type.Object({
    adminToken: Type.String({
        example: "cxt1234",
        description: "Admin token",
    }),
});
const PostAdminResponseSchema = {
    200: Type.Object({
        message: Type.String(),
    }),
};
var ServerNodeParams;
(function (ServerNodeParams) {
    ServerNodeParams.GetTransferStateByRoutingIdSchema = GetTransferStateByRoutingIdParamsSchema$1;
    ServerNodeParams.GetTransferStatesByRoutingIdSchema = GetTransferStatesByRoutingIdParamsSchema$1;
    ServerNodeParams.GetTransferStateSchema = GetTransferStateParamsSchema$1;
    ServerNodeParams.GetActiveTransfersByChannelAddressSchema = GetActiveTransfersByChannelAddressParamsSchema;
    ServerNodeParams.GetChannelStateSchema = GetChannelStateParamsSchema$1;
    ServerNodeParams.GetChannelStatesSchema = GetChannelStatesParamsSchema$1;
    ServerNodeParams.GetChannelStateByParticipantsSchema = GetChannelStateByParticipantsParamsSchema$1;
    ServerNodeParams.GetListenerSchema = GetListenerParamsSchema;
    ServerNodeParams.GetListenersSchema = GetListenersParamsSchema;
    ServerNodeParams.GetConfigSchema = Type.Object({});
    ServerNodeParams.SetupSchema = PostSetupBodySchema;
    ServerNodeParams.RequestSetupSchema = PostRequestSetupBodySchema;
    ServerNodeParams.DepositSchema = PostDepositBodySchema;
    ServerNodeParams.RequestCollateralSchema = PostRequestCollateralBodySchema;
    ServerNodeParams.SendDepositTxSchema = PostSendDepositTxBodySchema;
    ServerNodeParams.ConditionalTransferSchema = PostConditionalTransferBodySchema;
    ServerNodeParams.ResolveTransferSchema = PostResolveTransferBodySchema;
    ServerNodeParams.WithdrawSchema = PostWithdrawTransferBodySchema;
    ServerNodeParams.RegisterListenerSchema = PostRegisterListenerBodySchema;
    ServerNodeParams.AdminSchema = PostAdminBodySchema;
    ServerNodeParams.CreateNodeSchema = PostCreateNodeBodySchema;
})(ServerNodeParams || (ServerNodeParams = {}));
var ServerNodeResponses;
(function (ServerNodeResponses) {
    ServerNodeResponses.GetTransferStateByRoutingIdSchema = GetTransferStateByRoutingIdResponseSchema;
    ServerNodeResponses.GetTransferStatesByRoutingIdSchema = GetTransferStatesByRoutingIdResponseSchema;
    ServerNodeResponses.GetTransferStateSchema = GetTransferStateResponseSchema;
    ServerNodeResponses.GetActiveTransfersByChannelAddressSchema = GetActiveTransfersByChannelAddressResponseSchema;
    ServerNodeResponses.GetChannelStateSchema = GetChannelStateResponseSchema;
    ServerNodeResponses.GetChannelStateByParticipantsSchema = GetChannelStateByParticipantsResponseSchema;
    ServerNodeResponses.GetChannelStatesSchema = GetChannelStatesResponseSchema;
    ServerNodeResponses.GetListenerSchema = GetListenerResponseSchema;
    ServerNodeResponses.GetListenersSchema = GetListenersResponseSchema;
    ServerNodeResponses.GetConfigSchema = GetConfigResponseSchema;
    ServerNodeResponses.SetupSchema = PostSetupResponseSchema;
    ServerNodeResponses.RequestSetupSchema = PostRequestSetupResponseSchema;
    ServerNodeResponses.DepositSchema = PostDepositResponseSchema;
    ServerNodeResponses.RequestCollateralSchema = PostRequestCollateralResponseSchema;
    ServerNodeResponses.SendDepositTxSchema = PostSendDepositTxResponseSchema;
    ServerNodeResponses.ConditionalTransferSchema = PostConditionalTransferResponseSchema;
    ServerNodeResponses.ResolveTransferSchema = PostResolveTransferResponseSchema;
    ServerNodeResponses.WithdrawSchema = PostWithdrawTransferResponseSchema;
    ServerNodeResponses.RegisterListenerSchema = PostRegisterListenerResponseSchema;
    ServerNodeResponses.AdminSchema = PostAdminResponseSchema;
    ServerNodeResponses.CreateNodeSchema = PostCreateNodeResponseSchema;
})(ServerNodeResponses || (ServerNodeResponses = {}));

const StoredTransactionStatus = {
    submitted: "submitted",
    mined: "mined",
    failed: "failed",
};
const TransactionReason = {
    allowance: "allowance",
    approveTokens: "approveTokens",
    disputeChannel: "disputeChannel",
    disputeTransfer: "disputeTransfer",
    defundChannel: "defundChannel",
    defundTransfer: "defundTransfer",
    depositA: "depositA",
    depositB: "depositB",
    deployWithDepositA: "deployWithDepositA",
    transferTokens: "transferTokens",
    withdraw: "withdraw",
};

const HashlockTransferName = "HashlockTransfer";
const HashlockTransferStateEncoding = tidy(`tuple(
    bytes32 lockHash,
    uint256 expiry
  )`);
const HashlockTransferResolverEncoding = tidy(`tuple(
    bytes32 preImage
  )`);

const WithdrawName = "Withdraw";
const WithdrawStateEncoding = tidy(`tuple(
    bytes initiatorSignature,
    address initiator,
    address responder,
    bytes32 data,
    uint256 nonce,
    uint256 fee
  )`);
const WithdrawResolverEncoding = tidy(`tuple(
    bytes responderSignature
  )`);

const TransferNames = {
    [HashlockTransferName]: HashlockTransferName,
    [WithdrawName]: WithdrawName,
};
const TransferEncodingsMap = {
    [HashlockTransferName]: [HashlockTransferStateEncoding, HashlockTransferResolverEncoding],
    [WithdrawName]: [WithdrawStateEncoding, WithdrawResolverEncoding],
};

export { BalanceEncoding, CONDITIONAL_TRANSFER_CREATED_EVENT, CONDITIONAL_TRANSFER_RESOLVED_EVENT, ChainError, ChannelRpcMethods, CoreChannelStateEncoding, CoreTransferStateEncoding, DEFAULT_TRANSFER_TIMEOUT, DEPOSIT_RECONCILED_EVENT, ERC20Abi, EngineEvents, EngineParams, HashlockTransferName, HashlockTransferResolverEncoding, HashlockTransferStateEncoding, InboundChannelUpdateError, JsonRpcProvider, LockError, MINIMUM_TRANSFER_TIMEOUT, MessagingError, NodeError, OutboundChannelUpdateError, ProtocolEventName, ProtocolParams, REQUEST_COLLATERAL_EVENT, Result, RouterSchemas, SETUP_EVENT, ServerNodeParams, ServerNodeResponses, StoredTransactionStatus, TAddress, TBalance, TBasicMeta, TBytes, TBytes32, TChainId, TChannelUpdate, TChannelUpdateDetails, TChannelUpdateType, TContractAddresses, TCreateUpdateDetails, TDecimalString, TDepositUpdateDetails, TFullChannelState, TFullTransferState, TIntegerString, TNetworkContext, TPublicIdentifier, TRANSFER_DECREMENT, TResolveUpdateDetails, TSetupUpdateDetails, TSignature, TUrl, TransactionReason, TransferEncodingSchema, TransferEncodingsMap, TransferNameSchema, TransferNames, TransferResolverSchema, TransferStateSchema, UpdateType, ValidationError, VectorError, VectorNodeConfigSchema, WITHDRAWAL_CREATED_EVENT, WITHDRAWAL_RECONCILED_EVENT, WITHDRAWAL_RESOLVED_EVENT, WithdrawName, WithdrawResolverEncoding, WithdrawStateEncoding, enumify, tidy };
