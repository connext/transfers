import { FullChannelState, FullTransferState } from "./channel";
import { EngineParams } from "./schemas";
export declare const ChannelRpcMethods: {
    readonly chan_getChannelState: "chan_getChannelState";
    readonly chan_getChannelStateByParticipants: "chan_getChannelStateByParticipants";
    readonly chan_getChannelStates: "chan_getChannelStates";
    readonly chan_getTransferStateByRoutingId: "chan_getTransferStateByRoutingId";
    readonly chan_getTransferStatesByRoutingId: "chan_getTransferStatesByRoutingId";
    readonly chan_getActiveTransfers: "chan_getActiveTransfers";
    readonly chan_getTransferState: "chan_getTransferState";
    readonly chan_setup: "chan_setup";
    readonly chan_requestSetup: "chan_requestSetup";
    readonly chan_deposit: "chan_deposit";
    readonly chan_requestCollateral: "chan_requestCollateral";
    readonly chan_createTransfer: "chan_createTransfer";
    readonly chan_resolveTransfer: "chan_resolveTransfer";
    readonly chan_withdraw: "chan_withdraw";
};
export declare type ChannelRpcMethod = typeof ChannelRpcMethods[keyof typeof ChannelRpcMethods];
export declare type ChannelRpcMethodsPayloadMap = {
    [ChannelRpcMethods.chan_getChannelState]: EngineParams.GetChannelState;
    [ChannelRpcMethods.chan_getChannelStateByParticipants]: EngineParams.GetChannelStateByParticipants;
    [ChannelRpcMethods.chan_getTransferStateByRoutingId]: EngineParams.GetTransferStateByRoutingId;
    [ChannelRpcMethods.chan_getTransferStatesByRoutingId]: EngineParams.GetTransferStatesByRoutingId;
    [ChannelRpcMethods.chan_getActiveTransfers]: EngineParams.GetActiveTransfers;
    [ChannelRpcMethods.chan_getTransferState]: EngineParams.GetTransferState;
    [ChannelRpcMethods.chan_getChannelStates]: undefined;
    [ChannelRpcMethods.chan_setup]: EngineParams.Setup;
    [ChannelRpcMethods.chan_requestSetup]: EngineParams.Setup;
    [ChannelRpcMethods.chan_deposit]: EngineParams.Deposit;
    [ChannelRpcMethods.chan_requestCollateral]: EngineParams.Deposit;
    [ChannelRpcMethods.chan_createTransfer]: EngineParams.ConditionalTransfer;
    [ChannelRpcMethods.chan_resolveTransfer]: EngineParams.ResolveTransfer;
    [ChannelRpcMethods.chan_withdraw]: EngineParams.Withdraw;
};
export declare type ChannelRpcMethodsResponsesMap = {
    [ChannelRpcMethods.chan_getChannelState]: FullChannelState | undefined;
    [ChannelRpcMethods.chan_getChannelStateByParticipants]: FullChannelState | undefined;
    [ChannelRpcMethods.chan_getChannelStates]: FullChannelState[];
    [ChannelRpcMethods.chan_getTransferStateByRoutingId]: FullTransferState | undefined;
    [ChannelRpcMethods.chan_getTransferStatesByRoutingId]: FullTransferState[];
    [ChannelRpcMethods.chan_getActiveTransfers]: FullTransferState[];
    [ChannelRpcMethods.chan_getTransferState]: FullTransferState | undefined;
    [ChannelRpcMethods.chan_setup]: FullChannelState;
    [ChannelRpcMethods.chan_requestSetup]: FullChannelState;
    [ChannelRpcMethods.chan_deposit]: FullChannelState;
    [ChannelRpcMethods.chan_requestCollateral]: FullChannelState;
    [ChannelRpcMethods.chan_createTransfer]: FullChannelState;
    [ChannelRpcMethods.chan_resolveTransfer]: FullChannelState;
    [ChannelRpcMethods.chan_withdraw]: {
        channel: FullChannelState;
        transactionHash?: string;
    };
};
//# sourceMappingURL=vectorProvider.d.ts.map