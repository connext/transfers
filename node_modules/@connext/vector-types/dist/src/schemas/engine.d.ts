import { Static, TStringLiteral } from "@sinclair/typebox";
declare const GetTransferStateByRoutingIdParamsSchema: import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
    routingId: import("@sinclair/typebox").TString;
}>;
declare const GetTransferStatesByRoutingIdParamsSchema: import("@sinclair/typebox").TObject<{
    routingId: import("@sinclair/typebox").TString;
}>;
declare const GetActiveTransfersParamsSchema: import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
}>;
declare const GetTransferStateParamsSchema: import("@sinclair/typebox").TObject<{
    transferId: import("@sinclair/typebox").TString;
}>;
declare const SetupEngineParamsSchema: import("@sinclair/typebox").TObject<{
    counterpartyIdentifier: import("@sinclair/typebox").TString;
    chainId: import("@sinclair/typebox").TNumber;
    timeout: import("@sinclair/typebox").TString;
    meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
}>;
declare const DepositEngineParamsSchema: import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
    assetId: import("@sinclair/typebox").TString;
    meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
}>;
declare const RequestCollateralEngineParamsSchema: import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
    assetId: import("@sinclair/typebox").TString;
    amount: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>;
declare const CreateConditionalTransferParamsSchema: import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
    amount: import("@sinclair/typebox").TString;
    assetId: import("@sinclair/typebox").TString;
    recipient: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    recipientChainId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    recipientAssetId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    timeout: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
    type: import("@sinclair/typebox").TString;
    details: import("@sinclair/typebox").UserDefinedOptions;
}>;
declare const ResolveTransferParamsSchema: import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
    transferId: import("@sinclair/typebox").TString;
    meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
    transferResolver: import("@sinclair/typebox").UserDefinedOptions;
}>;
declare const RpcRequestEngineParamsSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TNumber;
    jsonrpc: TStringLiteral<"2.0">;
    method: import("@sinclair/typebox").TUnion<[TStringLiteral<"chan_getChannelState" | "chan_getChannelStateByParticipants" | "chan_getChannelStates" | "chan_getTransferStateByRoutingId" | "chan_getTransferStatesByRoutingId" | "chan_getActiveTransfers" | "chan_getTransferState" | "chan_setup" | "chan_requestSetup" | "chan_deposit" | "chan_requestCollateral" | "chan_createTransfer" | "chan_resolveTransfer" | "chan_withdraw">]>;
    params: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
}>;
export declare namespace EngineParams {
    const RpcRequestSchema: import("@sinclair/typebox").TObject<{
        id: import("@sinclair/typebox").TNumber;
        jsonrpc: TStringLiteral<"2.0">;
        method: import("@sinclair/typebox").TUnion<[TStringLiteral<"chan_getChannelState" | "chan_getChannelStateByParticipants" | "chan_getChannelStates" | "chan_getTransferStateByRoutingId" | "chan_getTransferStatesByRoutingId" | "chan_getActiveTransfers" | "chan_getTransferState" | "chan_setup" | "chan_requestSetup" | "chan_deposit" | "chan_requestCollateral" | "chan_createTransfer" | "chan_resolveTransfer" | "chan_withdraw">]>;
        params: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
    }>;
    type RpcRequest = Static<typeof RpcRequestEngineParamsSchema>;
    const GetTransferStateByRoutingIdSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        routingId: import("@sinclair/typebox").TString;
    }>;
    type GetTransferStateByRoutingId = Static<typeof GetTransferStateByRoutingIdParamsSchema>;
    const GetTransferStatesByRoutingIdSchema: import("@sinclair/typebox").TObject<{
        routingId: import("@sinclair/typebox").TString;
    }>;
    type GetTransferStatesByRoutingId = Static<typeof GetTransferStatesByRoutingIdParamsSchema>;
    const GetChannelStatesSchema: import("@sinclair/typebox").TObject<{}>;
    type GetChannelStates = Static<typeof GetChannelStatesSchema>;
    const GetChannelStateSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
    }>;
    type GetChannelState = Static<typeof GetChannelStateSchema>;
    const GetChannelStateByParticipantsSchema: import("@sinclair/typebox").TObject<{
        alice: import("@sinclair/typebox").TString;
        bob: import("@sinclair/typebox").TString;
        chainId: import("@sinclair/typebox").TNumber;
    }>;
    type GetChannelStateByParticipants = Static<typeof GetChannelStateByParticipantsSchema>;
    const GetActiveTransfersSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
    }>;
    type GetActiveTransfers = Static<typeof GetActiveTransfersParamsSchema>;
    const GetTransferStateSchema: import("@sinclair/typebox").TObject<{
        transferId: import("@sinclair/typebox").TString;
    }>;
    type GetTransferState = Static<typeof GetTransferStateParamsSchema>;
    const SetupSchema: import("@sinclair/typebox").TObject<{
        counterpartyIdentifier: import("@sinclair/typebox").TString;
        chainId: import("@sinclair/typebox").TNumber;
        timeout: import("@sinclair/typebox").TString;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
    }>;
    type Setup = Static<typeof SetupEngineParamsSchema>;
    const DepositSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        assetId: import("@sinclair/typebox").TString;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
    }>;
    type Deposit = Static<typeof DepositEngineParamsSchema>;
    const RequestCollateralSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        assetId: import("@sinclair/typebox").TString;
        amount: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    }>;
    type RequestCollateral = Static<typeof RequestCollateralEngineParamsSchema>;
    const ConditionalTransferSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        amount: import("@sinclair/typebox").TString;
        assetId: import("@sinclair/typebox").TString;
        recipient: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        recipientChainId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
        recipientAssetId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        timeout: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
        type: import("@sinclair/typebox").TString;
        details: import("@sinclair/typebox").UserDefinedOptions;
    }>;
    type ConditionalTransfer = Static<typeof CreateConditionalTransferParamsSchema>;
    const ResolveTransferSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        transferId: import("@sinclair/typebox").TString;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
        transferResolver: import("@sinclair/typebox").UserDefinedOptions;
    }>;
    type ResolveTransfer = Static<typeof ResolveTransferParamsSchema>;
    const WithdrawSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        amount: import("@sinclair/typebox").TString;
        assetId: import("@sinclair/typebox").TString;
        recipient: import("@sinclair/typebox").TString;
        fee: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
    }>;
    type Withdraw = Static<typeof WithdrawSchema>;
}
export {};
//# sourceMappingURL=engine.d.ts.map