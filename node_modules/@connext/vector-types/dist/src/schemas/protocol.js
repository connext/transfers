import { Type } from "@sinclair/typebox";
import { TPublicIdentifier, TIntegerString, TAddress } from "..";
import { TBytes32, TransferResolverSchema, TransferStateSchema } from "../schemas";
import { TBalance, TBasicMeta, TSetupUpdateDetails } from "./basic";
const SetupProtocolParamsSchema = Type.Intersect([
    TSetupUpdateDetails,
    Type.Object({ counterpartyIdentifier: TPublicIdentifier, meta: TBasicMeta }),
]);
const DepositProtocolParamsSchema = Type.Object({
    channelAddress: TAddress,
    assetId: TAddress,
    meta: TBasicMeta,
});
const CreateProtocolParamsSchema = Type.Object({
    channelAddress: TAddress,
    balance: TBalance,
    assetId: TAddress,
    transferDefinition: TAddress,
    transferInitialState: TransferStateSchema,
    timeout: TIntegerString,
    meta: TBasicMeta,
});
const ResolveProtocolParamsSchema = Type.Object({
    channelAddress: TAddress,
    transferId: TBytes32,
    transferResolver: TransferResolverSchema,
    meta: TBasicMeta,
});
export var ProtocolParams;
(function (ProtocolParams) {
    ProtocolParams.SetupSchema = SetupProtocolParamsSchema;
    ProtocolParams.DepositSchema = DepositProtocolParamsSchema;
    ProtocolParams.CreateSchema = CreateProtocolParamsSchema;
    ProtocolParams.ResolveSchema = ResolveProtocolParamsSchema;
})(ProtocolParams || (ProtocolParams = {}));
//# sourceMappingURL=protocol.js.map