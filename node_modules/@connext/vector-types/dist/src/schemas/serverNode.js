import { Type } from "@sinclair/typebox";
import { EngineEvents } from "../engine";
import { EngineParams } from "./engine";
import { TUrl, TAddress, TPublicIdentifier, TIntegerString, TBytes32, TFullTransferState, TFullChannelState, TChainId, } from "./basic";
const BasicChannelServerResponseSchema = {
    200: Type.Object({
        channelAddress: TAddress,
    }),
};
const BasicTransferServerResponseSchema = {
    200: Type.Object({
        channelAddress: TAddress,
        transferId: TBytes32,
        routingId: Type.Optional(TBytes32),
    }),
};
const GetTransferStateByRoutingIdParamsSchema = Type.Intersect([
    EngineParams.GetTransferStateByRoutingIdSchema,
    Type.Object({
        publicIdentifier: TPublicIdentifier,
    }),
]);
const GetTransferStateByRoutingIdResponseSchema = {
    200: Type.Union([Type.Undefined, TFullTransferState]),
};
const GetTransferStatesByRoutingIdParamsSchema = Type.Intersect([
    EngineParams.GetTransferStatesByRoutingIdSchema,
    Type.Object({
        publicIdentifier: TPublicIdentifier,
    }),
]);
const GetTransferStatesByRoutingIdResponseSchema = {
    200: Type.Array(TFullTransferState),
};
const GetActiveTransfersByChannelAddressParamsSchema = Type.Intersect([
    EngineParams.GetActiveTransfersSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const GetActiveTransfersByChannelAddressResponseSchema = {
    200: Type.Array(TFullTransferState),
};
const GetTransferStateParamsSchema = Type.Intersect([
    EngineParams.GetTransferStateSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const GetTransferStateResponseSchema = {
    200: Type.Union([Type.Undefined, TFullTransferState]),
};
const GetChannelStateParamsSchema = Type.Intersect([
    EngineParams.GetChannelStateSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const GetChannelStateResponseSchema = {
    200: Type.Union([Type.Undefined, TFullChannelState]),
};
const GetChannelStatesParamsSchema = Type.Intersect([
    EngineParams.GetChannelStatesSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const GetChannelStatesResponseSchema = {
    200: Type.Array(TAddress),
};
const GetChannelStateByParticipantsParamsSchema = Type.Object({
    publicIdentifier: TPublicIdentifier,
    counterparty: TPublicIdentifier,
    chainId: TChainId,
});
const GetChannelStateByParticipantsResponseSchema = GetChannelStateResponseSchema;
const GetConfigResponseSchema = {
    200: Type.Array(Type.Object({
        publicIdentifier: TPublicIdentifier,
        signerAddress: TAddress,
        index: Type.Integer(),
    })),
};
const GetListenerParamsSchema = Type.Object({
    eventName: Type.Union(Object.values(EngineEvents).map(e => Type.Literal(e))),
    publicIdentifier: TPublicIdentifier,
});
const GetListenerResponseSchema = {
    200: Type.Object({ url: TUrl }),
};
const GetListenersParamsSchema = Type.Object({ publicIdentifier: TPublicIdentifier });
const GetListenersResponseSchema = {
    200: Type.Map(TUrl),
};
const PostRegisterListenerBodySchema = Type.Object({
    publicIdentifier: TPublicIdentifier,
    events: Type.Map(Type.String()),
});
const PostRegisterListenerResponseSchema = {
    200: Type.Object({
        message: Type.String(),
    }),
};
const PostSetupBodySchema = Type.Intersect([
    EngineParams.SetupSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const PostSetupResponseSchema = BasicChannelServerResponseSchema;
const PostRequestSetupBodySchema = PostSetupBodySchema;
const PostRequestSetupResponseSchema = BasicChannelServerResponseSchema;
const PostDepositBodySchema = Type.Intersect([
    EngineParams.DepositSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const PostDepositResponseSchema = BasicChannelServerResponseSchema;
const PostRequestCollateralBodySchema = Type.Intersect([
    EngineParams.RequestCollateralSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const PostRequestCollateralResponseSchema = BasicChannelServerResponseSchema;
const PostSendDepositTxBodySchema = Type.Object({
    channelAddress: TAddress,
    amount: TIntegerString,
    assetId: TAddress,
    chainId: TChainId,
    publicIdentifier: TPublicIdentifier,
});
const PostSendDepositTxResponseSchema = {
    200: Type.Object({
        txHash: TBytes32,
    }),
};
const PostConditionalTransferBodySchema = Type.Intersect([
    EngineParams.ConditionalTransferSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const PostConditionalTransferResponseSchema = BasicTransferServerResponseSchema;
const PostResolveTransferBodySchema = Type.Intersect([
    EngineParams.ResolveTransferSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const PostResolveTransferResponseSchema = BasicTransferServerResponseSchema;
const PostWithdrawTransferBodySchema = Type.Intersect([
    EngineParams.WithdrawSchema,
    Type.Object({ publicIdentifier: TPublicIdentifier }),
]);
const PostWithdrawTransferResponseSchema = {
    200: Type.Object({
        channelAddress: TAddress,
        transferId: TBytes32,
        transactionHash: Type.Optional(TBytes32),
    }),
};
const PostCreateNodeBodySchema = Type.Object({
    index: Type.Integer({ minimum: 0, maximum: 2147483647 }),
    mnemonic: Type.Optional(Type.String()),
});
const PostCreateNodeResponseSchema = {
    200: Type.Object({
        publicIdentifier: TPublicIdentifier,
        signerAddress: TAddress,
        index: Type.Integer(),
    }),
};
const PostAdminBodySchema = Type.Object({
    adminToken: Type.String({
        example: "cxt1234",
        description: "Admin token",
    }),
});
const PostAdminResponseSchema = {
    200: Type.Object({
        message: Type.String(),
    }),
};
export var ServerNodeParams;
(function (ServerNodeParams) {
    ServerNodeParams.GetTransferStateByRoutingIdSchema = GetTransferStateByRoutingIdParamsSchema;
    ServerNodeParams.GetTransferStatesByRoutingIdSchema = GetTransferStatesByRoutingIdParamsSchema;
    ServerNodeParams.GetTransferStateSchema = GetTransferStateParamsSchema;
    ServerNodeParams.GetActiveTransfersByChannelAddressSchema = GetActiveTransfersByChannelAddressParamsSchema;
    ServerNodeParams.GetChannelStateSchema = GetChannelStateParamsSchema;
    ServerNodeParams.GetChannelStatesSchema = GetChannelStatesParamsSchema;
    ServerNodeParams.GetChannelStateByParticipantsSchema = GetChannelStateByParticipantsParamsSchema;
    ServerNodeParams.GetListenerSchema = GetListenerParamsSchema;
    ServerNodeParams.GetListenersSchema = GetListenersParamsSchema;
    ServerNodeParams.GetConfigSchema = Type.Object({});
    ServerNodeParams.SetupSchema = PostSetupBodySchema;
    ServerNodeParams.RequestSetupSchema = PostRequestSetupBodySchema;
    ServerNodeParams.DepositSchema = PostDepositBodySchema;
    ServerNodeParams.RequestCollateralSchema = PostRequestCollateralBodySchema;
    ServerNodeParams.SendDepositTxSchema = PostSendDepositTxBodySchema;
    ServerNodeParams.ConditionalTransferSchema = PostConditionalTransferBodySchema;
    ServerNodeParams.ResolveTransferSchema = PostResolveTransferBodySchema;
    ServerNodeParams.WithdrawSchema = PostWithdrawTransferBodySchema;
    ServerNodeParams.RegisterListenerSchema = PostRegisterListenerBodySchema;
    ServerNodeParams.AdminSchema = PostAdminBodySchema;
    ServerNodeParams.CreateNodeSchema = PostCreateNodeBodySchema;
})(ServerNodeParams || (ServerNodeParams = {}));
export var ServerNodeResponses;
(function (ServerNodeResponses) {
    ServerNodeResponses.GetTransferStateByRoutingIdSchema = GetTransferStateByRoutingIdResponseSchema;
    ServerNodeResponses.GetTransferStatesByRoutingIdSchema = GetTransferStatesByRoutingIdResponseSchema;
    ServerNodeResponses.GetTransferStateSchema = GetTransferStateResponseSchema;
    ServerNodeResponses.GetActiveTransfersByChannelAddressSchema = GetActiveTransfersByChannelAddressResponseSchema;
    ServerNodeResponses.GetChannelStateSchema = GetChannelStateResponseSchema;
    ServerNodeResponses.GetChannelStateByParticipantsSchema = GetChannelStateByParticipantsResponseSchema;
    ServerNodeResponses.GetChannelStatesSchema = GetChannelStatesResponseSchema;
    ServerNodeResponses.GetListenerSchema = GetListenerResponseSchema;
    ServerNodeResponses.GetListenersSchema = GetListenersResponseSchema;
    ServerNodeResponses.GetConfigSchema = GetConfigResponseSchema;
    ServerNodeResponses.SetupSchema = PostSetupResponseSchema;
    ServerNodeResponses.RequestSetupSchema = PostRequestSetupResponseSchema;
    ServerNodeResponses.DepositSchema = PostDepositResponseSchema;
    ServerNodeResponses.RequestCollateralSchema = PostRequestCollateralResponseSchema;
    ServerNodeResponses.SendDepositTxSchema = PostSendDepositTxResponseSchema;
    ServerNodeResponses.ConditionalTransferSchema = PostConditionalTransferResponseSchema;
    ServerNodeResponses.ResolveTransferSchema = PostResolveTransferResponseSchema;
    ServerNodeResponses.WithdrawSchema = PostWithdrawTransferResponseSchema;
    ServerNodeResponses.RegisterListenerSchema = PostRegisterListenerResponseSchema;
    ServerNodeResponses.AdminSchema = PostAdminResponseSchema;
    ServerNodeResponses.CreateNodeSchema = PostCreateNodeResponseSchema;
})(ServerNodeResponses || (ServerNodeResponses = {}));
//# sourceMappingURL=serverNode.js.map