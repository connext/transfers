import { Type } from "@sinclair/typebox";
import { ChannelRpcMethods } from "../vectorProvider";
import { TBasicMeta, TAddress, TBytes32, TPublicIdentifier, TChainId, TIntegerString, TransferResolverSchema, } from "./basic";
const GetTransferStateByRoutingIdParamsSchema = Type.Object({
    channelAddress: TAddress,
    routingId: TBytes32,
});
const GetTransferStatesByRoutingIdParamsSchema = Type.Object({
    routingId: TBytes32,
});
const GetChannelStateParamsSchema = Type.Object({ channelAddress: TAddress });
const GetChannelStatesParamsSchema = Type.Object({});
const GetChannelStateByParticipantsParamsSchema = Type.Object({
    alice: TPublicIdentifier,
    bob: TPublicIdentifier,
    chainId: TChainId,
});
const GetActiveTransfersParamsSchema = Type.Object({
    channelAddress: TAddress,
});
const GetTransferStateParamsSchema = Type.Object({
    transferId: TBytes32,
});
const SetupEngineParamsSchema = Type.Object({
    counterpartyIdentifier: TPublicIdentifier,
    chainId: TChainId,
    timeout: TIntegerString,
    meta: TBasicMeta,
});
const DepositEngineParamsSchema = Type.Object({
    channelAddress: TAddress,
    assetId: TAddress,
    meta: TBasicMeta,
});
const RequestCollateralEngineParamsSchema = Type.Object({
    channelAddress: TAddress,
    assetId: TAddress,
    amount: Type.Optional(TIntegerString),
});
const CreateConditionalTransferParamsSchema = Type.Object({
    channelAddress: TAddress,
    amount: TIntegerString,
    assetId: TAddress,
    recipient: Type.Optional(TPublicIdentifier),
    recipientChainId: Type.Optional(TChainId),
    recipientAssetId: Type.Optional(TAddress),
    timeout: Type.Optional(TIntegerString),
    meta: TBasicMeta,
    type: Type.String(),
    details: Type.Any(),
});
const ResolveTransferParamsSchema = Type.Object({
    channelAddress: TAddress,
    transferId: TBytes32,
    meta: TBasicMeta,
    transferResolver: TransferResolverSchema,
});
const WithdrawParamsSchema = Type.Object({
    channelAddress: TAddress,
    amount: TIntegerString,
    assetId: TAddress,
    recipient: TAddress,
    fee: Type.Optional(TIntegerString),
    meta: TBasicMeta,
});
const RpcRequestEngineParamsSchema = Type.Object({
    id: Type.Number({ minimum: 1 }),
    jsonrpc: Type.Literal("2.0"),
    method: Type.Union(Object.values(ChannelRpcMethods).map(methodName => Type.Literal(methodName))),
    params: Type.Optional(Type.Any()),
});
export var EngineParams;
(function (EngineParams) {
    EngineParams.RpcRequestSchema = RpcRequestEngineParamsSchema;
    EngineParams.GetTransferStateByRoutingIdSchema = GetTransferStateByRoutingIdParamsSchema;
    EngineParams.GetTransferStatesByRoutingIdSchema = GetTransferStatesByRoutingIdParamsSchema;
    EngineParams.GetChannelStatesSchema = GetChannelStatesParamsSchema;
    EngineParams.GetChannelStateSchema = GetChannelStateParamsSchema;
    EngineParams.GetChannelStateByParticipantsSchema = GetChannelStateByParticipantsParamsSchema;
    EngineParams.GetActiveTransfersSchema = GetActiveTransfersParamsSchema;
    EngineParams.GetTransferStateSchema = GetTransferStateParamsSchema;
    EngineParams.SetupSchema = SetupEngineParamsSchema;
    EngineParams.DepositSchema = DepositEngineParamsSchema;
    EngineParams.RequestCollateralSchema = RequestCollateralEngineParamsSchema;
    EngineParams.ConditionalTransferSchema = CreateConditionalTransferParamsSchema;
    EngineParams.ResolveTransferSchema = ResolveTransferParamsSchema;
    EngineParams.WithdrawSchema = WithdrawParamsSchema;
})(EngineParams || (EngineParams = {}));
//# sourceMappingURL=engine.js.map