import { Static, TStringLiteral, Type } from "@sinclair/typebox";
declare const GetTransferStateByRoutingIdParamsSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
    routingId: import("@sinclair/typebox").TString;
}>, import("@sinclair/typebox").TObject<{
    publicIdentifier: import("@sinclair/typebox").TString;
}>]>;
declare const GetTransferStateByRoutingIdResponseSchema: {
    200: import("@sinclair/typebox").TUnion<[typeof Type.Undefined, import("@sinclair/typebox").TObject<{
        balance: import("@sinclair/typebox").TObject<{
            to: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            amount: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
        }>;
        assetId: import("@sinclair/typebox").TString;
        channelAddress: import("@sinclair/typebox").TString;
        transferId: import("@sinclair/typebox").TString;
        transferDefinition: import("@sinclair/typebox").TString;
        transferTimeout: import("@sinclair/typebox").TString;
        initialStateHash: import("@sinclair/typebox").TString;
        initiator: import("@sinclair/typebox").TString;
        responder: import("@sinclair/typebox").TString;
        channelFactoryAddress: import("@sinclair/typebox").TString;
        chainId: import("@sinclair/typebox").TNumber;
        transferEncodings: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
        transferState: import("@sinclair/typebox").UserDefinedOptions;
        transferResolver: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
    }>]>;
};
declare const GetTransferStatesByRoutingIdParamsSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
    routingId: import("@sinclair/typebox").TString;
}>, import("@sinclair/typebox").TObject<{
    publicIdentifier: import("@sinclair/typebox").TString;
}>]>;
declare const GetTransferStatesByRoutingIdResponseSchema: {
    200: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        balance: import("@sinclair/typebox").TObject<{
            to: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            amount: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
        }>;
        assetId: import("@sinclair/typebox").TString;
        channelAddress: import("@sinclair/typebox").TString;
        transferId: import("@sinclair/typebox").TString;
        transferDefinition: import("@sinclair/typebox").TString;
        transferTimeout: import("@sinclair/typebox").TString;
        initialStateHash: import("@sinclair/typebox").TString;
        initiator: import("@sinclair/typebox").TString;
        responder: import("@sinclair/typebox").TString;
        channelFactoryAddress: import("@sinclair/typebox").TString;
        chainId: import("@sinclair/typebox").TNumber;
        transferEncodings: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
        transferState: import("@sinclair/typebox").UserDefinedOptions;
        transferResolver: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
    }>>;
};
declare const GetActiveTransfersByChannelAddressParamsSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
}>, import("@sinclair/typebox").TObject<{
    publicIdentifier: import("@sinclair/typebox").TString;
}>]>;
declare const GetActiveTransfersByChannelAddressResponseSchema: {
    200: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        balance: import("@sinclair/typebox").TObject<{
            to: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            amount: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
        }>;
        assetId: import("@sinclair/typebox").TString;
        channelAddress: import("@sinclair/typebox").TString;
        transferId: import("@sinclair/typebox").TString;
        transferDefinition: import("@sinclair/typebox").TString;
        transferTimeout: import("@sinclair/typebox").TString;
        initialStateHash: import("@sinclair/typebox").TString;
        initiator: import("@sinclair/typebox").TString;
        responder: import("@sinclair/typebox").TString;
        channelFactoryAddress: import("@sinclair/typebox").TString;
        chainId: import("@sinclair/typebox").TNumber;
        transferEncodings: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
        transferState: import("@sinclair/typebox").UserDefinedOptions;
        transferResolver: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
    }>>;
};
declare const GetTransferStateParamsSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
    transferId: import("@sinclair/typebox").TString;
}>, import("@sinclair/typebox").TObject<{
    publicIdentifier: import("@sinclair/typebox").TString;
}>]>;
declare const GetTransferStateResponseSchema: {
    200: import("@sinclair/typebox").TUnion<[typeof Type.Undefined, import("@sinclair/typebox").TObject<{
        balance: import("@sinclair/typebox").TObject<{
            to: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            amount: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
        }>;
        assetId: import("@sinclair/typebox").TString;
        channelAddress: import("@sinclair/typebox").TString;
        transferId: import("@sinclair/typebox").TString;
        transferDefinition: import("@sinclair/typebox").TString;
        transferTimeout: import("@sinclair/typebox").TString;
        initialStateHash: import("@sinclair/typebox").TString;
        initiator: import("@sinclair/typebox").TString;
        responder: import("@sinclair/typebox").TString;
        channelFactoryAddress: import("@sinclair/typebox").TString;
        chainId: import("@sinclair/typebox").TNumber;
        transferEncodings: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
        transferState: import("@sinclair/typebox").UserDefinedOptions;
        transferResolver: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
    }>]>;
};
export declare namespace ServerNodeParams {
    const GetTransferStateByRoutingIdSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        routingId: import("@sinclair/typebox").TString;
    }>, import("@sinclair/typebox").TObject<{
        publicIdentifier: import("@sinclair/typebox").TString;
    }>]>;
    type GetTransferStateByRoutingId = Static<typeof GetTransferStateByRoutingIdParamsSchema>;
    const GetTransferStatesByRoutingIdSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        routingId: import("@sinclair/typebox").TString;
    }>, import("@sinclair/typebox").TObject<{
        publicIdentifier: import("@sinclair/typebox").TString;
    }>]>;
    type GetTransferStatesByRoutingId = Static<typeof GetTransferStatesByRoutingIdParamsSchema>;
    const GetTransferStateSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        transferId: import("@sinclair/typebox").TString;
    }>, import("@sinclair/typebox").TObject<{
        publicIdentifier: import("@sinclair/typebox").TString;
    }>]>;
    type GetTransferState = Static<typeof GetTransferStateParamsSchema>;
    const GetActiveTransfersByChannelAddressSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
    }>, import("@sinclair/typebox").TObject<{
        publicIdentifier: import("@sinclair/typebox").TString;
    }>]>;
    type GetActiveTransfersByChannelAddress = Static<typeof GetActiveTransfersByChannelAddressParamsSchema>;
    const GetChannelStateSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
    }>, import("@sinclair/typebox").TObject<{
        publicIdentifier: import("@sinclair/typebox").TString;
    }>]>;
    type GetChannelState = Static<typeof GetChannelStateSchema>;
    const GetChannelStatesSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{}>, import("@sinclair/typebox").TObject<{
        publicIdentifier: import("@sinclair/typebox").TString;
    }>]>;
    type GetChannelStates = Static<typeof GetChannelStatesSchema>;
    const GetChannelStateByParticipantsSchema: import("@sinclair/typebox").TObject<{
        publicIdentifier: import("@sinclair/typebox").TString;
        counterparty: import("@sinclair/typebox").TString;
        chainId: import("@sinclair/typebox").TNumber;
    }>;
    type GetChannelStateByParticipants = Static<typeof GetChannelStateByParticipantsSchema>;
    const GetListenerSchema: import("@sinclair/typebox").TObject<{
        eventName: import("@sinclair/typebox").TUnion<[TStringLiteral<"SETUP" | "CONDITIONAL_TRANSFER_CREATED" | "CONDITIONAL_TRANSFER_RESOLVED" | "DEPOSIT_RECONCILED" | "REQUEST_COLLATERAL" | "WITHDRAWAL_CREATED" | "WITHDRAWAL_RESOLVED" | "WITHDRAWAL_RECONCILED">]>;
        publicIdentifier: import("@sinclair/typebox").TString;
    }>;
    type GetListener = Static<typeof GetListenerSchema>;
    const GetListenersSchema: import("@sinclair/typebox").TObject<{
        publicIdentifier: import("@sinclair/typebox").TString;
    }>;
    type GetListeners = Static<typeof GetListenersSchema>;
    const GetConfigSchema: import("@sinclair/typebox").TObject<{}>;
    type GetConfig = Static<typeof GetConfigSchema>;
    const SetupSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        counterpartyIdentifier: import("@sinclair/typebox").TString;
        chainId: import("@sinclair/typebox").TNumber;
        timeout: import("@sinclair/typebox").TString;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
    }>, import("@sinclair/typebox").TObject<{
        publicIdentifier: import("@sinclair/typebox").TString;
    }>]>;
    type Setup = Static<typeof SetupSchema>;
    const RequestSetupSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        counterpartyIdentifier: import("@sinclair/typebox").TString;
        chainId: import("@sinclair/typebox").TNumber;
        timeout: import("@sinclair/typebox").TString;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
    }>, import("@sinclair/typebox").TObject<{
        publicIdentifier: import("@sinclair/typebox").TString;
    }>]>;
    type RequestSetup = Static<typeof RequestSetupSchema>;
    const DepositSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        assetId: import("@sinclair/typebox").TString;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
    }>, import("@sinclair/typebox").TObject<{
        publicIdentifier: import("@sinclair/typebox").TString;
    }>]>;
    type Deposit = Static<typeof DepositSchema>;
    const RequestCollateralSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        assetId: import("@sinclair/typebox").TString;
        amount: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    }>, import("@sinclair/typebox").TObject<{
        publicIdentifier: import("@sinclair/typebox").TString;
    }>]>;
    type RequestCollateral = Static<typeof RequestCollateralSchema>;
    const SendDepositTxSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        amount: import("@sinclair/typebox").TString;
        assetId: import("@sinclair/typebox").TString;
        chainId: import("@sinclair/typebox").TNumber;
        publicIdentifier: import("@sinclair/typebox").TString;
    }>;
    type SendDepositTx = Static<typeof SendDepositTxSchema>;
    const ConditionalTransferSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        amount: import("@sinclair/typebox").TString;
        assetId: import("@sinclair/typebox").TString;
        recipient: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        recipientChainId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
        recipientAssetId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        timeout: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
        type: import("@sinclair/typebox").TString;
        details: import("@sinclair/typebox").UserDefinedOptions;
    }>, import("@sinclair/typebox").TObject<{
        publicIdentifier: import("@sinclair/typebox").TString;
    }>]>;
    type ConditionalTransfer = Static<typeof ConditionalTransferSchema>;
    const ResolveTransferSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        transferId: import("@sinclair/typebox").TString;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
        transferResolver: import("@sinclair/typebox").UserDefinedOptions;
    }>, import("@sinclair/typebox").TObject<{
        publicIdentifier: import("@sinclair/typebox").TString;
    }>]>;
    type ResolveTransfer = Static<typeof ResolveTransferSchema>;
    const WithdrawSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        amount: import("@sinclair/typebox").TString;
        assetId: import("@sinclair/typebox").TString;
        recipient: import("@sinclair/typebox").TString;
        fee: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
    }>, import("@sinclair/typebox").TObject<{
        publicIdentifier: import("@sinclair/typebox").TString;
    }>]>;
    type Withdraw = Static<typeof WithdrawSchema>;
    const RegisterListenerSchema: import("@sinclair/typebox").TObject<{
        publicIdentifier: import("@sinclair/typebox").TString;
        events: import("@sinclair/typebox").TMap<import("@sinclair/typebox").TString>;
    }>;
    type RegisterListener = Static<typeof RegisterListenerSchema>;
    const AdminSchema: import("@sinclair/typebox").TObject<{
        adminToken: import("@sinclair/typebox").TString;
    }>;
    type Admin = Static<typeof AdminSchema>;
    const CreateNodeSchema: import("@sinclair/typebox").TObject<{
        index: import("@sinclair/typebox").TInteger;
        mnemonic: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    }>;
    type CreateNode = Static<typeof CreateNodeSchema>;
}
export declare namespace ServerNodeResponses {
    const GetTransferStateByRoutingIdSchema: {
        200: import("@sinclair/typebox").TUnion<[typeof Type.Undefined, import("@sinclair/typebox").TObject<{
            balance: import("@sinclair/typebox").TObject<{
                to: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                amount: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            }>;
            assetId: import("@sinclair/typebox").TString;
            channelAddress: import("@sinclair/typebox").TString;
            transferId: import("@sinclair/typebox").TString;
            transferDefinition: import("@sinclair/typebox").TString;
            transferTimeout: import("@sinclair/typebox").TString;
            initialStateHash: import("@sinclair/typebox").TString;
            initiator: import("@sinclair/typebox").TString;
            responder: import("@sinclair/typebox").TString;
            channelFactoryAddress: import("@sinclair/typebox").TString;
            chainId: import("@sinclair/typebox").TNumber;
            transferEncodings: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            transferState: import("@sinclair/typebox").UserDefinedOptions;
            transferResolver: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
            meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
        }>]>;
    };
    type GetTransferStateByRoutingId = Static<typeof GetTransferStateByRoutingIdResponseSchema["200"]>;
    const GetTransferStatesByRoutingIdSchema: {
        200: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
            balance: import("@sinclair/typebox").TObject<{
                to: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                amount: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            }>;
            assetId: import("@sinclair/typebox").TString;
            channelAddress: import("@sinclair/typebox").TString;
            transferId: import("@sinclair/typebox").TString;
            transferDefinition: import("@sinclair/typebox").TString;
            transferTimeout: import("@sinclair/typebox").TString;
            initialStateHash: import("@sinclair/typebox").TString;
            initiator: import("@sinclair/typebox").TString;
            responder: import("@sinclair/typebox").TString;
            channelFactoryAddress: import("@sinclair/typebox").TString;
            chainId: import("@sinclair/typebox").TNumber;
            transferEncodings: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            transferState: import("@sinclair/typebox").UserDefinedOptions;
            transferResolver: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
            meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
        }>>;
    };
    type GetTransferStatesByRoutingId = Static<typeof GetTransferStatesByRoutingIdResponseSchema["200"]>;
    const GetTransferStateSchema: {
        200: import("@sinclair/typebox").TUnion<[typeof Type.Undefined, import("@sinclair/typebox").TObject<{
            balance: import("@sinclair/typebox").TObject<{
                to: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                amount: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            }>;
            assetId: import("@sinclair/typebox").TString;
            channelAddress: import("@sinclair/typebox").TString;
            transferId: import("@sinclair/typebox").TString;
            transferDefinition: import("@sinclair/typebox").TString;
            transferTimeout: import("@sinclair/typebox").TString;
            initialStateHash: import("@sinclair/typebox").TString;
            initiator: import("@sinclair/typebox").TString;
            responder: import("@sinclair/typebox").TString;
            channelFactoryAddress: import("@sinclair/typebox").TString;
            chainId: import("@sinclair/typebox").TNumber;
            transferEncodings: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            transferState: import("@sinclair/typebox").UserDefinedOptions;
            transferResolver: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
            meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
        }>]>;
    };
    type GetTransferState = Static<typeof GetTransferStateResponseSchema>;
    const GetActiveTransfersByChannelAddressSchema: {
        200: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
            balance: import("@sinclair/typebox").TObject<{
                to: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                amount: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            }>;
            assetId: import("@sinclair/typebox").TString;
            channelAddress: import("@sinclair/typebox").TString;
            transferId: import("@sinclair/typebox").TString;
            transferDefinition: import("@sinclair/typebox").TString;
            transferTimeout: import("@sinclair/typebox").TString;
            initialStateHash: import("@sinclair/typebox").TString;
            initiator: import("@sinclair/typebox").TString;
            responder: import("@sinclair/typebox").TString;
            channelFactoryAddress: import("@sinclair/typebox").TString;
            chainId: import("@sinclair/typebox").TNumber;
            transferEncodings: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            transferState: import("@sinclair/typebox").UserDefinedOptions;
            transferResolver: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
            meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
        }>>;
    };
    type GetActiveTransfersByChannelAddress = Static<typeof GetActiveTransfersByChannelAddressResponseSchema["200"]>;
    const GetChannelStateSchema: {
        200: import("@sinclair/typebox").TUnion<[typeof Type.Undefined, import("@sinclair/typebox").TObject<{
            assetIds: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            balances: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
                to: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                amount: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            }>>;
            channelAddress: import("@sinclair/typebox").TString;
            alice: import("@sinclair/typebox").TString;
            bob: import("@sinclair/typebox").TString;
            merkleRoot: import("@sinclair/typebox").TString;
            nonce: import("@sinclair/typebox").TNumber;
            processedDepositsA: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            processedDepositsB: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            timeout: import("@sinclair/typebox").TString;
            aliceIdentifier: import("@sinclair/typebox").TString;
            bobIdentifier: import("@sinclair/typebox").TString;
            latestUpdate: import("@sinclair/typebox").TObject<{
                channelAddress: import("@sinclair/typebox").TString;
                fromIdentifier: import("@sinclair/typebox").TString;
                toIdentifier: import("@sinclair/typebox").TString;
                type: import("@sinclair/typebox").TUnion<[TStringLiteral<"create" | "deposit" | "resolve" | "setup">]>;
                nonce: import("@sinclair/typebox").TNumber;
                balance: import("@sinclair/typebox").TObject<{
                    to: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                    amount: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                }>;
                assetId: import("@sinclair/typebox").TString;
                details: import("@sinclair/typebox").TObject<{
                    transferId: import("@sinclair/typebox").TString;
                    balance: import("@sinclair/typebox").TObject<{
                        to: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                        amount: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                    }>;
                    transferDefinition: import("@sinclair/typebox").TString;
                    transferTimeout: import("@sinclair/typebox").TString;
                    transferInitialState: import("@sinclair/typebox").UserDefinedOptions;
                    merkleProofData: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                    merkleRoot: import("@sinclair/typebox").TString;
                    meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
                }>;
                aliceSignature: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
                bobSignature: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            }>;
            networkContext: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
                channelFactoryAddress: import("@sinclair/typebox").TString;
                channelMastercopyAddress: import("@sinclair/typebox").TString;
                transferRegistryAddress: import("@sinclair/typebox").TString;
            }>, import("@sinclair/typebox").TObject<{
                chainId: import("@sinclair/typebox").TNumber;
                providerUrl: import("@sinclair/typebox").TString;
            }>]>;
        }>]>;
    };
    type GetChannelState = Static<typeof GetChannelStateSchema["200"]>;
    const GetChannelStateByParticipantsSchema: {
        200: import("@sinclair/typebox").TUnion<[typeof Type.Undefined, import("@sinclair/typebox").TObject<{
            assetIds: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            balances: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
                to: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                amount: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            }>>;
            channelAddress: import("@sinclair/typebox").TString;
            alice: import("@sinclair/typebox").TString;
            bob: import("@sinclair/typebox").TString;
            merkleRoot: import("@sinclair/typebox").TString;
            nonce: import("@sinclair/typebox").TNumber;
            processedDepositsA: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            processedDepositsB: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            timeout: import("@sinclair/typebox").TString;
            aliceIdentifier: import("@sinclair/typebox").TString;
            bobIdentifier: import("@sinclair/typebox").TString;
            latestUpdate: import("@sinclair/typebox").TObject<{
                channelAddress: import("@sinclair/typebox").TString;
                fromIdentifier: import("@sinclair/typebox").TString;
                toIdentifier: import("@sinclair/typebox").TString;
                type: import("@sinclair/typebox").TUnion<[TStringLiteral<"create" | "deposit" | "resolve" | "setup">]>;
                nonce: import("@sinclair/typebox").TNumber;
                balance: import("@sinclair/typebox").TObject<{
                    to: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                    amount: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                }>;
                assetId: import("@sinclair/typebox").TString;
                details: import("@sinclair/typebox").TObject<{
                    transferId: import("@sinclair/typebox").TString;
                    balance: import("@sinclair/typebox").TObject<{
                        to: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                        amount: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                    }>;
                    transferDefinition: import("@sinclair/typebox").TString;
                    transferTimeout: import("@sinclair/typebox").TString;
                    transferInitialState: import("@sinclair/typebox").UserDefinedOptions;
                    merkleProofData: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                    merkleRoot: import("@sinclair/typebox").TString;
                    meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").UserDefinedOptions>;
                }>;
                aliceSignature: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
                bobSignature: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            }>;
            networkContext: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
                channelFactoryAddress: import("@sinclair/typebox").TString;
                channelMastercopyAddress: import("@sinclair/typebox").TString;
                transferRegistryAddress: import("@sinclair/typebox").TString;
            }>, import("@sinclair/typebox").TObject<{
                chainId: import("@sinclair/typebox").TNumber;
                providerUrl: import("@sinclair/typebox").TString;
            }>]>;
        }>]>;
    };
    type GetChannelStateByParticipants = Static<typeof GetChannelStateByParticipantsSchema["200"]>;
    const GetChannelStatesSchema: {
        200: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    };
    type GetChannelStates = Static<typeof GetChannelStatesSchema["200"]>;
    const GetListenerSchema: {
        200: import("@sinclair/typebox").TObject<{
            url: import("@sinclair/typebox").TString;
        }>;
    };
    type GetListener = Static<typeof GetListenerSchema["200"]>;
    const GetListenersSchema: {
        200: import("@sinclair/typebox").TMap<import("@sinclair/typebox").TString>;
    };
    type GetListeners = Static<typeof GetListenersSchema["200"]>;
    const GetConfigSchema: {
        200: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
            publicIdentifier: import("@sinclair/typebox").TString;
            signerAddress: import("@sinclair/typebox").TString;
            index: import("@sinclair/typebox").TInteger;
        }>>;
    };
    type GetConfig = Static<typeof GetConfigSchema["200"]>;
    const SetupSchema: {
        200: import("@sinclair/typebox").TObject<{
            channelAddress: import("@sinclair/typebox").TString;
        }>;
    };
    type Setup = Static<typeof SetupSchema["200"]>;
    const RequestSetupSchema: {
        200: import("@sinclair/typebox").TObject<{
            channelAddress: import("@sinclair/typebox").TString;
        }>;
    };
    type RequestSetup = Static<typeof RequestSetupSchema["200"]>;
    const DepositSchema: {
        200: import("@sinclair/typebox").TObject<{
            channelAddress: import("@sinclair/typebox").TString;
        }>;
    };
    type Deposit = Static<typeof DepositSchema["200"]>;
    const RequestCollateralSchema: {
        200: import("@sinclair/typebox").TObject<{
            channelAddress: import("@sinclair/typebox").TString;
        }>;
    };
    type RequestCollateral = Static<typeof RequestCollateralSchema["200"]>;
    const SendDepositTxSchema: {
        200: import("@sinclair/typebox").TObject<{
            txHash: import("@sinclair/typebox").TString;
        }>;
    };
    type SendDepositTx = Static<typeof SendDepositTxSchema["200"]>;
    const ConditionalTransferSchema: {
        200: import("@sinclair/typebox").TObject<{
            channelAddress: import("@sinclair/typebox").TString;
            transferId: import("@sinclair/typebox").TString;
            routingId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        }>;
    };
    type ConditionalTransfer = Static<typeof ConditionalTransferSchema["200"]>;
    const ResolveTransferSchema: {
        200: import("@sinclair/typebox").TObject<{
            channelAddress: import("@sinclair/typebox").TString;
            transferId: import("@sinclair/typebox").TString;
            routingId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        }>;
    };
    type ResolveTransfer = Static<typeof ResolveTransferSchema["200"]>;
    const WithdrawSchema: {
        200: import("@sinclair/typebox").TObject<{
            channelAddress: import("@sinclair/typebox").TString;
            transferId: import("@sinclair/typebox").TString;
            transactionHash: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        }>;
    };
    type Withdraw = Static<typeof WithdrawSchema["200"]>;
    const RegisterListenerSchema: {
        200: import("@sinclair/typebox").TObject<{
            message: import("@sinclair/typebox").TString;
        }>;
    };
    type RegisterListener = Static<typeof RegisterListenerSchema["200"]>;
    const AdminSchema: {
        200: import("@sinclair/typebox").TObject<{
            message: import("@sinclair/typebox").TString;
        }>;
    };
    type Admin = Static<typeof AdminSchema["200"]>;
    const CreateNodeSchema: {
        200: import("@sinclair/typebox").TObject<{
            publicIdentifier: import("@sinclair/typebox").TString;
            signerAddress: import("@sinclair/typebox").TString;
            index: import("@sinclair/typebox").TInteger;
        }>;
    };
    type CreateNode = Static<typeof CreateNodeSchema["200"]>;
}
export {};
//# sourceMappingURL=serverNode.d.ts.map