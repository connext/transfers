import { Address } from "../basic";
import { Values } from "../error";
import { HashlockTransferName, HashlockTransferResolver, HashlockTransferState } from "./hashlockTransfer";
import { WithdrawName, WithdrawResolver, WithdrawState } from "./withdraw";
export declare const TransferNames: {
    readonly HashlockTransfer: "HashlockTransfer";
    readonly Withdraw: "Withdraw";
};
export interface TransferResolverMap {
    [HashlockTransferName]: HashlockTransferResolver;
    [WithdrawName]: WithdrawResolver;
}
export interface TransferStateMap {
    [HashlockTransferName]: HashlockTransferState;
    [WithdrawName]: WithdrawState;
}
export declare const TransferEncodingsMap: {
    readonly HashlockTransfer: readonly [string, string];
    readonly Withdraw: readonly [string, string];
};
export declare type TransferName = keyof typeof TransferNames;
export declare type TransferState = Values<TransferStateMap>;
export declare type TransferResolver = Values<TransferResolverMap>;
export declare type TransferEncodings = Values<typeof TransferEncodingsMap>;
export declare type RegisteredTransfer<T extends TransferName = any> = {
    stateEncoding: typeof TransferEncodingsMap[T][0];
    resolverEncoding: typeof TransferEncodingsMap[T][1];
    definition: Address;
    name: T;
};
//# sourceMappingURL=shared.d.ts.map