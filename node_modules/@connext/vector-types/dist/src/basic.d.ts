import * as ethers from "ethers";
import { providers } from "ethers";
export { Contract } from "ethers";
export declare type JsonRpcProvider = providers.JsonRpcProvider;
export declare const JsonRpcProvider: typeof ethers.ethers.providers.JsonRpcProvider;
export declare type TransactionReceipt = providers.TransactionReceipt;
export declare type TransactionResponse = providers.TransactionResponse;
export declare type BigNumberish = ethers.BigNumberish;
export declare type Network = providers.Network;
export declare type Transaction = providers.TransactionRequest;
export declare type ABIEncoding = string;
export declare type Address = string;
export declare type AssetId = string;
export declare type Bytes32 = string;
export declare type DecString = string;
export declare type HexString = string;
export declare type PublicIdentifier = string;
export declare type PublicKey = string;
export declare type PrivateKey = string;
export declare type SignatureString = string;
export declare type UrlString = string;
export interface EthSignature {
    r: string;
    s: string;
    v: string;
}
export declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
//# sourceMappingURL=basic.d.ts.map