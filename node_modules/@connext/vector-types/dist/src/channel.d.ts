import { Address } from "./basic";
import { TransferEncodingsMap, TransferName, TransferResolver, TransferResolverMap, TransferState, TransferStateMap } from "./transferDefinitions";
export declare type ContextualAddress = {
    address: Address;
    chainId: number;
};
export declare type SetupParams = {
    counterpartyIdentifier: string;
    timeout: string;
    networkContext: NetworkContext;
};
export declare type DepositParams = {
    channelAddress: string;
    assetId: string;
};
export declare type CreateTransferParams = {
    channelAddress: string;
    balance: Balance;
    assetId: string;
    transferDefinition: string;
    transferInitialState: TransferState;
    timeout: string;
    meta?: any;
};
export declare type ResolveTransferParams = {
    channelAddress: string;
    transferId: string;
    transferResolver: TransferResolver;
    meta?: any;
};
export declare const UpdateType: {
    readonly create: "create";
    readonly deposit: "deposit";
    readonly resolve: "resolve";
    readonly setup: "setup";
};
export declare type UpdateType = typeof UpdateType[keyof typeof UpdateType];
export interface UpdateParamsMap {
    [UpdateType.create]: CreateTransferParams;
    [UpdateType.deposit]: DepositParams;
    [UpdateType.resolve]: ResolveTransferParams;
    [UpdateType.setup]: SetupParams;
}
export declare type UpdateParams<T extends UpdateType> = {
    channelAddress: string;
    type: T;
    details: UpdateParamsMap[T];
};
export declare type Balance = {
    amount: string[];
    to: Address[];
};
export declare const CoreChannelStateEncoding: string;
export interface CoreChannelState {
    channelAddress: Address;
    alice: Address;
    bob: Address;
    assetIds: Address[];
    balances: Balance[];
    processedDepositsA: string[];
    processedDepositsB: string[];
    timeout: string;
    nonce: number;
    merkleRoot: string;
    defundNonce: string;
}
export declare type FullChannelState<T extends UpdateType = any> = CoreChannelState & {
    aliceIdentifier: string;
    bobIdentifier: string;
    latestUpdate: ChannelUpdate<T>;
    networkContext: NetworkContext;
};
export interface ChannelCommitmentData {
    state: CoreChannelState;
    aliceSignature?: string;
    bobSignature?: string;
    channelFactoryAddress: Address;
    chainId: number;
}
export declare const CoreTransferStateEncoding: string;
export interface CoreTransferState {
    channelAddress: Address;
    transferId: string;
    transferDefinition: Address;
    initiator: Address;
    responder: Address;
    assetId: Address;
    balance: Balance;
    transferTimeout: string;
    initialStateHash: string;
}
export declare type FullTransferState<T extends TransferName = any> = CoreTransferState & {
    channelFactoryAddress: string;
    chainId: number;
    transferEncodings: typeof TransferEncodingsMap[T];
    transferState: TransferStateMap[T];
    transferResolver?: TransferResolverMap[T];
    meta?: any;
};
export interface TransferCommitmentData {
    state: CoreTransferState;
    channelFactoryAddress: Address;
    chainId: number;
    merkleProofData: string[];
}
export declare type ChainAddresses = {
    [chainId: number]: ContractAddresses;
};
export declare type ContractAddresses = {
    channelFactoryAddress: Address;
    channelMastercopyAddress: Address;
    transferRegistryAddress: Address;
};
export declare type NetworkContext = ContractAddresses & {
    chainId: number;
    providerUrl: string;
};
export declare type ChannelUpdate<T extends UpdateType> = {
    channelAddress: string;
    fromIdentifier: string;
    toIdentifier: string;
    type: T;
    nonce: number;
    balance: Balance;
    assetId: Address;
    details: ChannelUpdateDetailsMap[T];
    aliceSignature?: string;
    bobSignature?: string;
};
export interface ChannelUpdateDetailsMap {
    [UpdateType.create]: CreateUpdateDetails;
    [UpdateType.deposit]: DepositUpdateDetails;
    [UpdateType.resolve]: ResolveUpdateDetails;
    [UpdateType.setup]: SetupUpdateDetails;
}
export declare type CreateUpdateDetails = {
    transferId: string;
    balance: Balance;
    transferDefinition: Address;
    transferTimeout: string;
    transferInitialState: TransferState;
    transferEncodings: string[];
    merkleProofData: string[];
    merkleRoot: string;
    meta?: any;
};
export declare type ResolveUpdateDetails = {
    transferId: string;
    transferDefinition: Address;
    transferResolver: TransferResolver;
    merkleRoot: string;
    meta?: any;
};
export declare type DepositUpdateDetails = {
    totalDepositsAlice: string;
    totalDepositsBob: string;
};
export declare type SetupUpdateDetails = {
    timeout: string;
    networkContext: NetworkContext;
};
//# sourceMappingURL=channel.d.ts.map