import { ChannelUpdate, CreateTransferParams, DepositParams, FullChannelState, FullTransferState, ResolveTransferParams, SetupParams, UpdateType } from "./channel";
import { InboundChannelUpdateError, OutboundChannelUpdateError, Result } from "./error";
import { ProtocolEventName, ProtocolEventPayloadsMap } from "./event";
export interface IVectorProtocol {
    signerAddress: string;
    publicIdentifier: string;
    setup(params: SetupParams): Promise<Result<FullChannelState, OutboundChannelUpdateError>>;
    deposit(params: DepositParams): Promise<Result<FullChannelState, OutboundChannelUpdateError>>;
    create(params: CreateTransferParams): Promise<Result<FullChannelState, OutboundChannelUpdateError>>;
    resolve(params: ResolveTransferParams): Promise<Result<FullChannelState, OutboundChannelUpdateError>>;
    on<T extends ProtocolEventName>(event: T, callback: (payload: ProtocolEventPayloadsMap[T]) => void | Promise<void>, filter?: (payload: ProtocolEventPayloadsMap[T]) => boolean): void;
    once<T extends ProtocolEventName>(event: T, callback: (payload: ProtocolEventPayloadsMap[T]) => void | Promise<void>, filter?: (payload: ProtocolEventPayloadsMap[T]) => boolean): void;
    off<T extends ProtocolEventName>(event?: T): Promise<void>;
    waitFor<T extends ProtocolEventName>(event: T, timeout: number, filter?: (payload: ProtocolEventPayloadsMap[T]) => boolean): Promise<ProtocolEventPayloadsMap[T]>;
    getChannelState(channelAddress: string): Promise<FullChannelState | undefined>;
    getChannelStateByParticipants(alice: string, bob: string, chainId: number): Promise<FullChannelState | undefined>;
    getChannelStates(): Promise<FullChannelState[]>;
    getTransferState(transferId: string): Promise<FullTransferState | undefined>;
}
declare type VectorChannelMessageData<T extends UpdateType = any> = {
    update: ChannelUpdate<T>;
    latestUpdate: ChannelUpdate<any> | undefined;
};
export declare type VectorChannelMessage<T extends UpdateType = any> = {
    to: string;
    from: string;
    inbox: string;
    data: VectorChannelMessageData<T>;
};
export declare type VectorErrorMessage = Omit<VectorChannelMessage, "data"> & {
    error: InboundChannelUpdateError;
};
export declare type VectorMessage = VectorChannelMessage | VectorErrorMessage;
export {};
//# sourceMappingURL=protocol.d.ts.map